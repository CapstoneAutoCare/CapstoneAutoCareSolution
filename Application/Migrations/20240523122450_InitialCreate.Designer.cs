// <auto-generated />
using System;
using Application;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Application.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240523122450_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Domain.Entities.Admin", b =>
                {
                    b.Property<Guid>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AdminId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("MaintenanceCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookingId");

                    b.HasIndex("ClientId");

                    b.HasIndex("MaintenanceCenterId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Domain.Entities.CustomerCare", b =>
                {
                    b.Property<Guid>("CustomerCareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerCareDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerCareId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("CenterId");

                    b.ToTable("CustomerCares");
                });

            modelBuilder.Entity("Domain.Entities.FeedBack", b =>
                {
                    b.Property<Guid>("FeedBackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MaintenanceCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Vote")
                        .HasColumnType("int");

                    b.HasKey("FeedBackId");

                    b.HasIndex("MaintenanceCenterId");

                    b.HasIndex("ReceiptId")
                        .IsUnique();

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("Domain.Entities.MaintananceSchedule", b =>
                {
                    b.Property<Guid>("MaintananceScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Odo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehicleModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MaintananceScheduleId");

                    b.HasIndex("VehicleModelId");

                    b.ToTable("MaintananceSchedules");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceCenter", b =>
                {
                    b.Property<Guid>("MaintenanceCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaintenanceCenterDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaintenanceCenterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.HasKey("MaintenanceCenterId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("MaintenanceCenters");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceHistoryStatus", b =>
                {
                    b.Property<Guid>("MaintenanceHistoryStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MaintenanceInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaintenanceHistoryStatusId");

                    b.HasIndex("MaintenanceInformationId");

                    b.ToTable("MaintenanceHistoryStatuses");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceInformation", b =>
                {
                    b.Property<Guid>("InformationMaintenanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CustomerCareId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FinishedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InformationMaintenanceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StaffCareId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InformationMaintenanceId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("CustomerCareId");

                    b.HasIndex("StaffCareId");

                    b.ToTable("MaintenanceInformations");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceItem", b =>
                {
                    b.Property<Guid>("MaintenanceItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ActualCost")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<Guid>("InformationMaintenanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaintenanceItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceCareCostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SparePartsCostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.HasKey("MaintenanceItemId");

                    b.HasIndex("InformationMaintenanceId");

                    b.HasIndex("ServiceCareCostId");

                    b.HasIndex("SparePartsCostId");

                    b.ToTable("MaintenanceItems");
                });

            modelBuilder.Entity("Domain.Entities.MaintenancePlan", b =>
                {
                    b.Property<Guid>("MaintenancePlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("MaintananceScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaintenancePlanDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaintenancePlanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaintenancePlanId");

                    b.HasIndex("MaintananceScheduleId");

                    b.ToTable("MaintenancePlans");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceService", b =>
                {
                    b.Property<Guid>("MaintenanceCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ActuralCost")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("MaintenanceServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceCareId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaintenanceCenterId");

                    b.HasIndex("ServiceCareId");

                    b.ToTable("MaintenanceServices");
                });

            modelBuilder.Entity("Domain.Entities.OdoHistory", b =>
                {
                    b.Property<Guid>("OdoHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MaintenanceInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Odo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OdoHistoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehiclesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OdoHistoryId");

                    b.HasIndex("MaintenanceInformationId")
                        .IsUnique();

                    b.HasIndex("VehiclesId");

                    b.ToTable("OdoHistories");
                });

            modelBuilder.Entity("Domain.Entities.Receipt", b =>
                {
                    b.Property<Guid>("ReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InformationMaintenanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReceiptName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<int>("VAT")
                        .HasColumnType("int");

                    b.HasKey("ReceiptId");

                    b.HasIndex("InformationMaintenanceId")
                        .IsUnique();

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("Domain.Entities.ServiceCare", b =>
                {
                    b.Property<Guid>("ServiceCareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("MaintenancePlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("OriginalPrice")
                        .HasColumnType("float");

                    b.Property<string>("ServiceCareDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceCareName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceCareType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceCareId");

                    b.HasIndex("MaintenancePlanId");

                    b.ToTable("ServiceCares");
                });

            modelBuilder.Entity("Domain.Entities.SpareParts", b =>
                {
                    b.Property<Guid>("SparePartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("MaintenancePlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("OriginalPrice")
                        .HasColumnType("float");

                    b.Property<string>("SparePartDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SparePartName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SparePartType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SparePartId");

                    b.HasIndex("MaintenancePlanId");

                    b.ToTable("SpareParts");
                });

            modelBuilder.Entity("Domain.Entities.SparePartsItem", b =>
                {
                    b.Property<Guid>("SparePartsItemtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ActuralCost")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("MaintenanceCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SparePartsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SparePartsItemtId");

                    b.HasIndex("MaintenanceCenterId");

                    b.HasIndex("SparePartsId");

                    b.ToTable("SparePartsItem");
                });

            modelBuilder.Entity("Domain.Entities.StaffCare", b =>
                {
                    b.Property<Guid>("StaffCareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffCareDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffCareId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("CenterId");

                    b.ToTable("StaffCares");
                });

            modelBuilder.Entity("Domain.Entities.Technician", b =>
                {
                    b.Property<Guid>("TechnicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("InformationMaintenanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaffCareId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechnicialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("UnitCost")
                        .HasColumnType("float");

                    b.HasKey("TechnicianId");

                    b.HasIndex("InformationMaintenanceId");

                    b.HasIndex("StaffCareId");

                    b.ToTable("Technician");
                });

            modelBuilder.Entity("Domain.Entities.VehicleModel", b =>
                {
                    b.Property<Guid>("VehicleModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehiclesBrandId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VehicleModelId");

                    b.HasIndex("VehiclesBrandId");

                    b.ToTable("VehicleModel");
                });

            modelBuilder.Entity("Domain.Entities.Vehicles", b =>
                {
                    b.Property<Guid>("VehiclesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Odo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehicleModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VehiclesId");

                    b.HasIndex("ClientId");

                    b.HasIndex("VehicleModelId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Domain.Entities.VehiclesBrand", b =>
                {
                    b.Property<Guid>("VehiclesBrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehiclesBrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehiclesBrandId");

                    b.ToTable("VehiclesBrand");
                });

            modelBuilder.Entity("Domain.Entities.VehiclesMaintenance", b =>
                {
                    b.Property<Guid>("MaintenanceCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehiclesBrandId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MaintenanceCenterId", "VehiclesBrandId");

                    b.HasIndex("VehiclesBrandId");

                    b.ToTable("VehiclesMaintenances");
                });

            modelBuilder.Entity("Domain.Entities.Admin", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("Admin")
                        .HasForeignKey("Domain.Entities.Admin", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("Bookings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MaintenanceCenter", "MaintenanceCenter")
                        .WithMany("Bookings")
                        .HasForeignKey("MaintenanceCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Vehicles", "Vehicles")
                        .WithMany("Bookings")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("MaintenanceCenter");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("Client")
                        .HasForeignKey("Domain.Entities.Client", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.CustomerCare", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("CustomerCare")
                        .HasForeignKey("Domain.Entities.CustomerCare", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MaintenanceCenter", "MaintenanceCenter")
                        .WithMany("CustomerCares")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("MaintenanceCenter");
                });

            modelBuilder.Entity("Domain.Entities.FeedBack", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceCenter", "MaintenanceCenter")
                        .WithMany("FeedBacks")
                        .HasForeignKey("MaintenanceCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Receipt", "Receipt")
                        .WithOne("FeedBack")
                        .HasForeignKey("Domain.Entities.FeedBack", "ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenanceCenter");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("Domain.Entities.MaintananceSchedule", b =>
                {
                    b.HasOne("Domain.Entities.VehicleModel", "VehicleModel")
                        .WithMany("MaintenanceSchedules")
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceCenter", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("MaintenanceCenter")
                        .HasForeignKey("Domain.Entities.MaintenanceCenter", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceHistoryStatus", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceInformation", "MaintenanceInformation")
                        .WithMany("MaintenanceHistoryStatuses")
                        .HasForeignKey("MaintenanceInformationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaintenanceInformation");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceInformation", b =>
                {
                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.CustomerCare", "CustomerCare")
                        .WithMany("InformationMaintenances")
                        .HasForeignKey("CustomerCareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.StaffCare", null)
                        .WithMany("InformationMaintenances")
                        .HasForeignKey("StaffCareId");

                    b.Navigation("Booking");

                    b.Navigation("CustomerCare");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceItem", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceInformation", "InformationMaintenance")
                        .WithMany("MaintenanceItems")
                        .HasForeignKey("InformationMaintenanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MaintenanceService", "ServiceCareCost")
                        .WithMany("MaintenanceItems")
                        .HasForeignKey("ServiceCareCostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SparePartsItem", "SparePartsCost")
                        .WithMany("MaintenanceItems")
                        .HasForeignKey("SparePartsCostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InformationMaintenance");

                    b.Navigation("ServiceCareCost");

                    b.Navigation("SparePartsCost");
                });

            modelBuilder.Entity("Domain.Entities.MaintenancePlan", b =>
                {
                    b.HasOne("Domain.Entities.MaintananceSchedule", "MaintananceSchedule")
                        .WithMany("MaintenancePlans")
                        .HasForeignKey("MaintananceScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaintananceSchedule");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceService", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceCenter", "MaintenanceCenter")
                        .WithMany("MaintenanceServices")
                        .HasForeignKey("MaintenanceCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ServiceCare", "ServiceCare")
                        .WithMany("MaintenanceServices")
                        .HasForeignKey("ServiceCareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaintenanceCenter");

                    b.Navigation("ServiceCare");
                });

            modelBuilder.Entity("Domain.Entities.OdoHistory", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceInformation", "MaintenanceInformation")
                        .WithOne("OdoHistory")
                        .HasForeignKey("Domain.Entities.OdoHistory", "MaintenanceInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Vehicles", "Vehicles")
                        .WithMany("OdoHistories")
                        .HasForeignKey("VehiclesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaintenanceInformation");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Domain.Entities.Receipt", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceInformation", "InformationMaintenance")
                        .WithOne("Receipt")
                        .HasForeignKey("Domain.Entities.Receipt", "InformationMaintenanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InformationMaintenance");
                });

            modelBuilder.Entity("Domain.Entities.ServiceCare", b =>
                {
                    b.HasOne("Domain.Entities.MaintenancePlan", "MaintenancePlan")
                        .WithMany("ServiceCares")
                        .HasForeignKey("MaintenancePlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaintenancePlan");
                });

            modelBuilder.Entity("Domain.Entities.SpareParts", b =>
                {
                    b.HasOne("Domain.Entities.MaintenancePlan", "MaintenancePlan")
                        .WithMany("Parts")
                        .HasForeignKey("MaintenancePlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaintenancePlan");
                });

            modelBuilder.Entity("Domain.Entities.SparePartsItem", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceCenter", "MaintenanceCenter")
                        .WithMany("SparePartsCosts")
                        .HasForeignKey("MaintenanceCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SpareParts", "SpareParts")
                        .WithMany("SparePartsItems")
                        .HasForeignKey("SparePartsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaintenanceCenter");

                    b.Navigation("SpareParts");
                });

            modelBuilder.Entity("Domain.Entities.StaffCare", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("StaffCare")
                        .HasForeignKey("Domain.Entities.StaffCare", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MaintenanceCenter", "MaintenanceCenter")
                        .WithMany("StaffCares")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("MaintenanceCenter");
                });

            modelBuilder.Entity("Domain.Entities.Technician", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceInformation", "InformationMaintenance")
                        .WithMany("Technicians")
                        .HasForeignKey("InformationMaintenanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.StaffCare", "StaffCare")
                        .WithMany("Technicians")
                        .HasForeignKey("StaffCareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InformationMaintenance");

                    b.Navigation("StaffCare");
                });

            modelBuilder.Entity("Domain.Entities.VehicleModel", b =>
                {
                    b.HasOne("Domain.Entities.VehiclesBrand", "VehiclesBrand")
                        .WithMany("VehicleModels")
                        .HasForeignKey("VehiclesBrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VehiclesBrand");
                });

            modelBuilder.Entity("Domain.Entities.Vehicles", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("Vehicles")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.VehicleModel", "VehicleModel")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("Domain.Entities.VehiclesMaintenance", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceCenter", "MaintenanceCenter")
                        .WithMany("VehiclesMaintenance")
                        .HasForeignKey("MaintenanceCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.VehiclesBrand", "VehiclesBrand")
                        .WithMany("VehiclesMaintenance")
                        .HasForeignKey("VehiclesBrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaintenanceCenter");

                    b.Navigation("VehiclesBrand");
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("Client")
                        .IsRequired();

                    b.Navigation("CustomerCare")
                        .IsRequired();

                    b.Navigation("MaintenanceCenter")
                        .IsRequired();

                    b.Navigation("StaffCare")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Domain.Entities.CustomerCare", b =>
                {
                    b.Navigation("InformationMaintenances");
                });

            modelBuilder.Entity("Domain.Entities.MaintananceSchedule", b =>
                {
                    b.Navigation("MaintenancePlans");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceCenter", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CustomerCares");

                    b.Navigation("FeedBacks");

                    b.Navigation("MaintenanceServices");

                    b.Navigation("SparePartsCosts");

                    b.Navigation("StaffCares");

                    b.Navigation("VehiclesMaintenance");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceInformation", b =>
                {
                    b.Navigation("MaintenanceHistoryStatuses");

                    b.Navigation("MaintenanceItems");

                    b.Navigation("OdoHistory")
                        .IsRequired();

                    b.Navigation("Receipt")
                        .IsRequired();

                    b.Navigation("Technicians");
                });

            modelBuilder.Entity("Domain.Entities.MaintenancePlan", b =>
                {
                    b.Navigation("Parts");

                    b.Navigation("ServiceCares");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceService", b =>
                {
                    b.Navigation("MaintenanceItems");
                });

            modelBuilder.Entity("Domain.Entities.Receipt", b =>
                {
                    b.Navigation("FeedBack")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.ServiceCare", b =>
                {
                    b.Navigation("MaintenanceServices");
                });

            modelBuilder.Entity("Domain.Entities.SpareParts", b =>
                {
                    b.Navigation("SparePartsItems");
                });

            modelBuilder.Entity("Domain.Entities.SparePartsItem", b =>
                {
                    b.Navigation("MaintenanceItems");
                });

            modelBuilder.Entity("Domain.Entities.StaffCare", b =>
                {
                    b.Navigation("InformationMaintenances");

                    b.Navigation("Technicians");
                });

            modelBuilder.Entity("Domain.Entities.VehicleModel", b =>
                {
                    b.Navigation("MaintenanceSchedules");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Domain.Entities.Vehicles", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("OdoHistories");
                });

            modelBuilder.Entity("Domain.Entities.VehiclesBrand", b =>
                {
                    b.Navigation("VehicleModels");

                    b.Navigation("VehiclesMaintenance");
                });
#pragma warning restore 612, 618
        }
    }
}
