// <auto-generated />
using System;
using Application;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Application.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountID = new Guid("810cbf15-4a31-408f-8368-f12f4baed223"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4389),
                            Email = "center1",
                            Gender = "1",
                            Logo = "1",
                            Password = "1",
                            Phone = "1",
                            Role = "CENTER",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            AccountID = new Guid("80bfdfee-9024-4594-aa9b-53388bbfa376"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4400),
                            Email = "center2",
                            Gender = "1",
                            Logo = "1",
                            Password = "1",
                            Phone = "1",
                            Role = "CENTER",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            AccountID = new Guid("484c7277-f5f2-40ef-89cb-52cc9083eca7"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4561),
                            Email = "c1",
                            Gender = "1",
                            Logo = "1",
                            Password = "1",
                            Phone = "1",
                            Role = "CLIENT",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            AccountID = new Guid("4c5daf71-fcd8-4ac0-9f6b-ec6e64977dbe"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4574),
                            Email = "c2",
                            Gender = "1",
                            Logo = "1",
                            Password = "1",
                            Phone = "1",
                            Role = "CLIENT",
                            Status = "ACTIVE"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Admin", b =>
                {
                    b.Property<Guid>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AdminId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("MaintananceScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MaintenanceCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookingId");

                    b.HasIndex("ClientId");

                    b.HasIndex("MaintananceScheduleId");

                    b.HasIndex("MaintenanceCenterId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = new Guid("0f0b7d77-5d99-4504-bcb1-c6739fa5b425"),
                            AccountId = new Guid("484c7277-f5f2-40ef-89cb-52cc9083eca7"),
                            Address = "98C Đ. Hồ Bá Phấn, Phước Long A, Thủ Đức, Thành phố Hồ Chí Minh",
                            Birthday = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4557),
                            FirstName = "P",
                            LastName = "D"
                        },
                        new
                        {
                            ClientId = new Guid("1f1d2fc7-c131-4d02-8a29-6c5b23536595"),
                            AccountId = new Guid("4c5daf71-fcd8-4ac0-9f6b-ec6e64977dbe"),
                            Address = "98C Đ. Hồ Bá Phấn, Phước Long A, Thủ Đức, Thành phố Hồ Chí Minh",
                            Birthday = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4567),
                            FirstName = "F",
                            LastName = "L"
                        });
                });

            modelBuilder.Entity("Domain.Entities.CustomerCare", b =>
                {
                    b.Property<Guid>("CustomerCareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerCareDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerCareId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("CenterId");

                    b.ToTable("CustomerCares");
                });

            modelBuilder.Entity("Domain.Entities.FeedBack", b =>
                {
                    b.Property<Guid>("FeedBackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MaintenanceCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Vote")
                        .HasColumnType("int");

                    b.HasKey("FeedBackId");

                    b.HasIndex("MaintenanceCenterId");

                    b.HasIndex("ReceiptId")
                        .IsUnique();

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("Domain.Entities.ImageRepairReceipt", b =>
                {
                    b.Property<Guid>("ImageRepairReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MaintenanceCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ImageRepairReceiptId");

                    b.HasIndex("MaintenanceCenterId");

                    b.HasIndex("VehicleId");

                    b.ToTable("ImageRepairReceipts");
                });

            modelBuilder.Entity("Domain.Entities.MaintananceSchedule", b =>
                {
                    b.Property<Guid>("MaintananceScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaintananceScheduleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehicleModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MaintananceScheduleId");

                    b.HasIndex("VehicleModelId");

                    b.ToTable("MaintananceSchedules");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceCenter", b =>
                {
                    b.Property<Guid>("MaintenanceCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaintenanceCenterDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaintenanceCenterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.HasKey("MaintenanceCenterId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("MaintenanceCenters");

                    b.HasData(
                        new
                        {
                            MaintenanceCenterId = new Guid("c583fa44-0380-42b2-9c4d-c39b8907236e"),
                            AccountId = new Guid("810cbf15-4a31-408f-8368-f12f4baed223"),
                            Address = "98C Đ. Hồ Bá Phấn, Phước Long A, Thủ Đức, Thành phố Hồ Chí Minh",
                            City = "Thành phố Hồ Chí Minh",
                            Country = "VN",
                            CreateDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4380),
                            District = "Quận 9",
                            MaintenanceCenterDescription = "Gara Phi Long Ô Tô BK",
                            MaintenanceCenterName = "Gara Phi Long Ô Tô BK",
                            Rating = 5f
                        },
                        new
                        {
                            MaintenanceCenterId = new Guid("6ee55d86-639d-4b20-9d08-88572c4fcfff"),
                            AccountId = new Guid("80bfdfee-9024-4594-aa9b-53388bbfa376"),
                            Address = "98C Đ. Hồ Bá Phấn, Phước Long A, Thủ Đức, Thành phố Hồ Chí Minh",
                            City = "Thành phố Hồ Chí Minh",
                            Country = "VN",
                            CreateDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4396),
                            District = "Quận 9",
                            MaintenanceCenterDescription = "Gara Phi Long Ô Tô BK",
                            MaintenanceCenterName = "Gara Phi Long Ô Tô BK",
                            Rating = 5f
                        });
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceHistoryStatus", b =>
                {
                    b.Property<Guid>("MaintenanceHistoryStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MaintenanceInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaintenanceHistoryStatusId");

                    b.HasIndex("MaintenanceInformationId");

                    b.ToTable("MaintenanceHistoryStatuses");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceInformation", b =>
                {
                    b.Property<Guid>("InformationMaintenanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CustomerCareId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FinishedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InformationMaintenanceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("InformationMaintenanceId");

                    b.HasIndex("BookingId")
                        .IsUnique()
                        .HasFilter("[BookingId] IS NOT NULL");

                    b.HasIndex("CustomerCareId");

                    b.ToTable("MaintenanceInformations");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceService", b =>
                {
                    b.Property<Guid>("MaintenanceServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MaintenanceCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaintenanceServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ServiceCareId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaintenanceServiceId");

                    b.HasIndex("MaintenanceCenterId");

                    b.HasIndex("ServiceCareId");

                    b.ToTable("MaintenanceServices");

                    b.HasData(
                        new
                        {
                            MaintenanceServiceId = new Guid("b8fab786-afc3-4428-8f9f-04af559e149c"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5141),
                            Image = "https://dochoiotogiare.com/wp-content/uploads/2018/09/cam-bien-lui-va-canh-bao-va-cham10.png",
                            MaintenanceCenterId = new Guid("c583fa44-0380-42b2-9c4d-c39b8907236e"),
                            MaintenanceServiceName = "Chăm sóc nội thất bằng máy nước nóng",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            MaintenanceServiceId = new Guid("fae2d617-548a-43ff-92d4-b7ef5972d273"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5149),
                            Image = "https://hanoicomputercdn.com/media/product/72039_camera_hanh_trinh_xiaomi_70mai_m500_64gb__2_.jpg",
                            MaintenanceCenterId = new Guid("c583fa44-0380-42b2-9c4d-c39b8907236e"),
                            MaintenanceServiceName = "Chăm sóc khoang máy",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            MaintenanceServiceId = new Guid("e59a227e-3926-4396-b6f5-2b657fac18b9"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5153),
                            Image = "https://dochoiotogiare.com/wp-content/uploads/2018/09/cam-bien-lui-va-canh-bao-va-cham10.png",
                            MaintenanceCenterId = new Guid("c583fa44-0380-42b2-9c4d-c39b8907236e"),
                            MaintenanceServiceName = "Chăm sóc khoang máy",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            MaintenanceServiceId = new Guid("ac847bb9-9eb8-4f4a-9e9d-ad0b08f4eb0e"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5157),
                            Image = "https://dochoiotogiare.com/wp-content/uploads/2018/09/cam-bien-lui-va-canh-bao-va-cham10.png",
                            MaintenanceCenterId = new Guid("c583fa44-0380-42b2-9c4d-c39b8907236e"),
                            MaintenanceServiceName = "Phủ Ceramic bảo vệ sơn",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            MaintenanceServiceId = new Guid("9cf735ab-79b0-4be4-aecd-c8a9c78fa6c3"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5164),
                            Image = "https://dochoiotogiare.com/wp-content/uploads/2018/09/cam-bien-lui-va-canh-bao-va-cham10.png",
                            MaintenanceCenterId = new Guid("c583fa44-0380-42b2-9c4d-c39b8907236e"),
                            MaintenanceServiceName = "Làm sạch bề mặt sơn",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            MaintenanceServiceId = new Guid("df6032a7-d4a4-4cd5-b5f0-fd4881bf7f15"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5168),
                            Image = "https://dochoiotogiare.com/wp-content/uploads/2018/09/cam-bien-lui-va-canh-bao-va-cham10.png",
                            MaintenanceCenterId = new Guid("c583fa44-0380-42b2-9c4d-c39b8907236e"),
                            MaintenanceServiceName = "Tẩy bụi sơn công nghiệp",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            MaintenanceServiceId = new Guid("51c817e0-0118-4380-bc85-142fffebfbc8"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5172),
                            Image = "https://dochoiotogiare.com/wp-content/uploads/2018/09/cam-bien-lui-va-canh-bao-va-cham10.png",
                            MaintenanceCenterId = new Guid("c583fa44-0380-42b2-9c4d-c39b8907236e"),
                            MaintenanceServiceName = "Chăm sóc kính",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            MaintenanceServiceId = new Guid("27495860-a1af-456c-8c01-5ca128007269"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5211),
                            Image = "https://dochoiotogiare.com/wp-content/uploads/2018/09/cam-bien-lui-va-canh-bao-va-cham10.png",
                            MaintenanceCenterId = new Guid("6ee55d86-639d-4b20-9d08-88572c4fcfff"),
                            MaintenanceServiceName = "Chăm sóc nội thất bằng máy nước nóng",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            MaintenanceServiceId = new Guid("ce58285a-dd85-4f4a-b678-a4aa2f8b3fcb"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5214),
                            Image = "https://hanoicomputercdn.com/media/product/72039_camera_hanh_trinh_xiaomi_70mai_m500_64gb__2_.jpg",
                            MaintenanceCenterId = new Guid("6ee55d86-639d-4b20-9d08-88572c4fcfff"),
                            MaintenanceServiceName = "Chăm sóc khoang máy",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            MaintenanceServiceId = new Guid("94123be8-418e-4c1b-aaa0-045f4456e538"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5217),
                            Image = "https://dochoiotogiare.com/wp-content/uploads/2018/09/cam-bien-lui-va-canh-bao-va-cham10.png",
                            MaintenanceCenterId = new Guid("6ee55d86-639d-4b20-9d08-88572c4fcfff"),
                            MaintenanceServiceName = "Chăm sóc khoang máy",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            MaintenanceServiceId = new Guid("727be42e-fedf-4ba8-bcc2-e5a5aa90316b"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5220),
                            Image = "https://dochoiotogiare.com/wp-content/uploads/2018/09/cam-bien-lui-va-canh-bao-va-cham10.png",
                            MaintenanceCenterId = new Guid("6ee55d86-639d-4b20-9d08-88572c4fcfff"),
                            MaintenanceServiceName = "Phủ Ceramic bảo vệ sơn",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            MaintenanceServiceId = new Guid("aa578a9b-2d7a-485f-b2eb-859c051561c5"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5222),
                            Image = "https://dochoiotogiare.com/wp-content/uploads/2018/09/cam-bien-lui-va-canh-bao-va-cham10.png",
                            MaintenanceCenterId = new Guid("6ee55d86-639d-4b20-9d08-88572c4fcfff"),
                            MaintenanceServiceName = "Làm sạch bề mặt sơn",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            MaintenanceServiceId = new Guid("f1fd99e9-7aae-4e4a-b38a-47de5b8c7731"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5232),
                            Image = "https://dochoiotogiare.com/wp-content/uploads/2018/09/cam-bien-lui-va-canh-bao-va-cham10.png",
                            MaintenanceCenterId = new Guid("6ee55d86-639d-4b20-9d08-88572c4fcfff"),
                            MaintenanceServiceName = "Tẩy bụi sơn công nghiệp",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            MaintenanceServiceId = new Guid("9eca9300-5cea-425d-a5bc-6d35d8618287"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5235),
                            Image = "https://dochoiotogiare.com/wp-content/uploads/2018/09/cam-bien-lui-va-canh-bao-va-cham10.png",
                            MaintenanceCenterId = new Guid("6ee55d86-639d-4b20-9d08-88572c4fcfff"),
                            MaintenanceServiceName = "Chăm sóc kính",
                            Status = "ACTIVE"
                        });
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceServiceCost", b =>
                {
                    b.Property<Guid>("MaintenanceServiceCostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ActuralCost")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MaintenanceServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaintenanceServiceCostId");

                    b.HasIndex("MaintenanceServiceId");

                    b.ToTable("MaintenanceServiceCosts");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceServiceInfo", b =>
                {
                    b.Property<Guid>("MaintenanceServiceInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ActualCost")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<Guid>("InformationMaintenanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MaintenanceServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaintenanceServiceInfoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.HasKey("MaintenanceServiceInfoId");

                    b.HasIndex("MaintenanceServiceId");

                    b.HasIndex("InformationMaintenanceId", "MaintenanceServiceId")
                        .IsUnique()
                        .HasFilter("[MaintenanceServiceId] IS NOT NULL");

                    b.ToTable("MaintenanceServiceInfos");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceSparePartInfo", b =>
                {
                    b.Property<Guid>("MaintenanceSparePartInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ActualCost")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<Guid>("InformationMaintenanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaintenanceSparePartInfoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SparePartsItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.HasKey("MaintenanceSparePartInfoId");

                    b.HasIndex("SparePartsItemId");

                    b.HasIndex("InformationMaintenanceId", "SparePartsItemId")
                        .IsUnique()
                        .HasFilter("[SparePartsItemId] IS NOT NULL");

                    b.ToTable("MaintenanceSparePartInfos");
                });

            modelBuilder.Entity("Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.HasIndex("AccountId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Domain.Entities.OdoHistory", b =>
                {
                    b.Property<Guid>("OdoHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MaintenanceInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Odo")
                        .HasColumnType("int");

                    b.Property<string>("OdoHistoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehiclesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OdoHistoryId");

                    b.HasIndex("MaintenanceInformationId")
                        .IsUnique();

                    b.HasIndex("VehiclesId");

                    b.ToTable("OdoHistories");
                });

            modelBuilder.Entity("Domain.Entities.Receipt", b =>
                {
                    b.Property<Guid>("ReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InformationMaintenanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReceiptName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<int>("VAT")
                        .HasColumnType("int");

                    b.HasKey("ReceiptId");

                    b.HasIndex("InformationMaintenanceId")
                        .IsUnique();

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("Domain.Entities.ServiceCare", b =>
                {
                    b.Property<Guid>("ServiceCareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("MaintananceScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("OriginalPrice")
                        .HasColumnType("float");

                    b.Property<string>("ServiceCareDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceCareName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceCareType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceCareId");

                    b.HasIndex("MaintananceScheduleId");

                    b.ToTable("ServiceCares");
                });

            modelBuilder.Entity("Domain.Entities.SpareParts", b =>
                {
                    b.Property<Guid>("SparePartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("MaintananceScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("OriginalPrice")
                        .HasColumnType("float");

                    b.Property<string>("SparePartDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SparePartName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SparePartType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SparePartId");

                    b.HasIndex("MaintananceScheduleId");

                    b.ToTable("SpareParts");
                });

            modelBuilder.Entity("Domain.Entities.SparePartsItem", b =>
                {
                    b.Property<Guid>("SparePartsItemtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MaintenanceCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SparePartsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SparePartsItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SparePartsItemtId");

                    b.HasIndex("MaintenanceCenterId");

                    b.HasIndex("SparePartsId");

                    b.ToTable("SparePartsItem");

                    b.HasData(
                        new
                        {
                            SparePartsItemtId = new Guid("65b297eb-c6a5-4bcf-98da-6250a1aa711e"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5006),
                            Image = "https://dochoiotogiare.com/wp-content/uploads/2018/09/cam-bien-lui-va-canh-bao-va-cham10.png",
                            MaintenanceCenterId = new Guid("c583fa44-0380-42b2-9c4d-c39b8907236e"),
                            SparePartsItemName = "Cảm biến lùi xe ô tô",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            SparePartsItemtId = new Guid("1e3041f8-8a06-41b3-8ae0-66f1085d2505"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5014),
                            Image = "https://hanoicomputercdn.com/media/product/72039_camera_hanh_trinh_xiaomi_70mai_m500_64gb__2_.jpg",
                            MaintenanceCenterId = new Guid("c583fa44-0380-42b2-9c4d-c39b8907236e"),
                            SparePartsItemName = "Camera hành trình",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            SparePartsItemtId = new Guid("258728a6-7317-407a-9f05-39204c707e85"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5022),
                            Image = "https://dochoiotogiare.com/wp-content/uploads/2018/09/cam-bien-lui-va-canh-bao-va-cham10.png",
                            MaintenanceCenterId = new Guid("c583fa44-0380-42b2-9c4d-c39b8907236e"),
                            SparePartsItemName = "Lọc gió xe ô tô",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            SparePartsItemtId = new Guid("750bf945-ee83-495a-9c46-64cd6e124b64"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5030),
                            Image = "https://dochoiotogiare.com/wp-content/uploads/2018/09/cam-bien-lui-va-canh-bao-va-cham10.png",
                            MaintenanceCenterId = new Guid("c583fa44-0380-42b2-9c4d-c39b8907236e"),
                            SparePartsItemName = "Màn hình xe ô tô",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            SparePartsItemtId = new Guid("f120a03d-cd1a-434e-abc3-5c3bae5ff119"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5034),
                            Image = "https://dochoiotogiare.com/wp-content/uploads/2018/09/cam-bien-lui-va-canh-bao-va-cham10.png",
                            MaintenanceCenterId = new Guid("c583fa44-0380-42b2-9c4d-c39b8907236e"),
                            SparePartsItemName = "Giá màn hình xe ô tô",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            SparePartsItemtId = new Guid("156c5de4-3eb7-4fbb-a24e-47c05a97fe72"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5039),
                            Image = "https://dochoiotogiare.com/wp-content/uploads/2018/09/cam-bien-lui-va-canh-bao-va-cham10.png",
                            MaintenanceCenterId = new Guid("c583fa44-0380-42b2-9c4d-c39b8907236e"),
                            SparePartsItemName = "Gạt mưa ô tô",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            SparePartsItemtId = new Guid("23d196fb-e465-4afd-abeb-312c6e654393"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5043),
                            Image = "https://dochoiotogiare.com/wp-content/uploads/2018/09/cam-bien-lui-va-canh-bao-va-cham10.png",
                            MaintenanceCenterId = new Guid("c583fa44-0380-42b2-9c4d-c39b8907236e"),
                            SparePartsItemName = "Rèm che nắng",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            SparePartsItemtId = new Guid("f6bfccac-f929-4150-b142-fac4ab87eaba"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5083),
                            Image = "https://dochoiotogiare.com/wp-content/uploads/2018/09/cam-bien-lui-va-canh-bao-va-cham10.png",
                            MaintenanceCenterId = new Guid("6ee55d86-639d-4b20-9d08-88572c4fcfff"),
                            SparePartsItemName = "Cảm biến lùi xe ô tô",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            SparePartsItemtId = new Guid("90c798f0-9f11-448b-9b24-2290c613a222"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5087),
                            Image = "https://hanoicomputercdn.com/media/product/72039_camera_hanh_trinh_xiaomi_70mai_m500_64gb__2_.jpg",
                            MaintenanceCenterId = new Guid("6ee55d86-639d-4b20-9d08-88572c4fcfff"),
                            SparePartsItemName = "Camera hành trình",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            SparePartsItemtId = new Guid("5ff7d406-55a5-4805-b40d-e87c4d4196fc"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5089),
                            Image = "https://dochoiotogiare.com/wp-content/uploads/2018/09/cam-bien-lui-va-canh-bao-va-cham10.png",
                            MaintenanceCenterId = new Guid("6ee55d86-639d-4b20-9d08-88572c4fcfff"),
                            SparePartsItemName = "Lọc gió xe ô tô",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            SparePartsItemtId = new Guid("d87d867d-5fdb-43f7-abe6-dca8e68b9687"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5094),
                            Image = "https://dochoiotogiare.com/wp-content/uploads/2018/09/cam-bien-lui-va-canh-bao-va-cham10.png",
                            MaintenanceCenterId = new Guid("6ee55d86-639d-4b20-9d08-88572c4fcfff"),
                            SparePartsItemName = "Màn hình xe ô tô",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            SparePartsItemtId = new Guid("da33c959-30ef-437f-805a-8aa5198b8f91"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5096),
                            Image = "https://dochoiotogiare.com/wp-content/uploads/2018/09/cam-bien-lui-va-canh-bao-va-cham10.png",
                            MaintenanceCenterId = new Guid("6ee55d86-639d-4b20-9d08-88572c4fcfff"),
                            SparePartsItemName = "Giá màn hình xe ô tô",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            SparePartsItemtId = new Guid("6f0ba2c2-4af1-45cd-b92e-ee0d1df14798"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5100),
                            Image = "https://dochoiotogiare.com/wp-content/uploads/2018/09/cam-bien-lui-va-canh-bao-va-cham10.png",
                            MaintenanceCenterId = new Guid("6ee55d86-639d-4b20-9d08-88572c4fcfff"),
                            SparePartsItemName = "Gạt mưa ô tô",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            SparePartsItemtId = new Guid("62c586ec-a024-4d7e-bb0f-8267ff24a51f"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(5103),
                            Image = "https://dochoiotogiare.com/wp-content/uploads/2018/09/cam-bien-lui-va-canh-bao-va-cham10.png",
                            MaintenanceCenterId = new Guid("6ee55d86-639d-4b20-9d08-88572c4fcfff"),
                            SparePartsItemName = "Rèm che nắng",
                            Status = "ACTIVE"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SparePartsItemCost", b =>
                {
                    b.Property<Guid>("SparePartsItemCostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ActuralCost")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SparePartsItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SparePartsItemCostId");

                    b.HasIndex("SparePartsItemId");

                    b.ToTable("SparePartsItemCosts");
                });

            modelBuilder.Entity("Domain.Entities.StaffCare", b =>
                {
                    b.Property<Guid>("StaffCareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffCareDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffCareId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("CenterId");

                    b.ToTable("StaffCares");
                });

            modelBuilder.Entity("Domain.Entities.Technician", b =>
                {
                    b.Property<Guid>("TechnicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("InformationMaintenanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaffCareId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechnicialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("UnitCost")
                        .HasColumnType("float");

                    b.HasKey("TechnicianId");

                    b.HasIndex("InformationMaintenanceId");

                    b.HasIndex("StaffCareId");

                    b.ToTable("Technician");
                });

            modelBuilder.Entity("Domain.Entities.VehicleModel", b =>
                {
                    b.Property<Guid>("VehicleModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehiclesBrandId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VehicleModelId");

                    b.HasIndex("VehiclesBrandId");

                    b.ToTable("VehicleModel");

                    b.HasData(
                        new
                        {
                            VehicleModelId = new Guid("c647a508-dfff-4ae4-9e65-373d38aa49d0"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4673),
                            Image = "320i",
                            Status = "ACTIVE",
                            VehicleModelName = "320i",
                            VehiclesBrandId = new Guid("7c03d318-821e-4030-8d98-5a6fea612827")
                        },
                        new
                        {
                            VehicleModelId = new Guid("9cce192d-a55c-49d2-9aa3-a68bde159fb9"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4678),
                            Image = "328i",
                            Status = "ACTIVE",
                            VehicleModelName = "328i",
                            VehiclesBrandId = new Guid("7c03d318-821e-4030-8d98-5a6fea612827")
                        },
                        new
                        {
                            VehicleModelId = new Guid("0920501e-878b-456d-ae1b-0612960e38fb"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4682),
                            Image = "330i",
                            Status = "ACTIVE",
                            VehicleModelName = "330i",
                            VehiclesBrandId = new Guid("7c03d318-821e-4030-8d98-5a6fea612827")
                        },
                        new
                        {
                            VehicleModelId = new Guid("1f184c1b-75b1-418f-aece-b483c8e313f3"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4685),
                            Image = "i7",
                            Status = "ACTIVE",
                            VehicleModelName = "i7",
                            VehiclesBrandId = new Guid("7c03d318-821e-4030-8d98-5a6fea612827")
                        },
                        new
                        {
                            VehicleModelId = new Guid("58627b84-38ff-486b-8931-6a4deecd4294"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4688),
                            Image = "740Li",
                            Status = "ACTIVE",
                            VehicleModelName = "740Li",
                            VehiclesBrandId = new Guid("7c03d318-821e-4030-8d98-5a6fea612827")
                        },
                        new
                        {
                            VehicleModelId = new Guid("69b37f56-8810-48e9-baa3-57cb984fedb3"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4693),
                            Image = "M6",
                            Status = "ACTIVE",
                            VehicleModelName = "M6",
                            VehiclesBrandId = new Guid("7c03d318-821e-4030-8d98-5a6fea612827")
                        },
                        new
                        {
                            VehicleModelId = new Guid("8f8e2ddf-2e84-48ba-bd00-32722ec46836"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4736),
                            Image = "E180",
                            Status = "ACTIVE",
                            VehicleModelName = "E180",
                            VehiclesBrandId = new Guid("5e255fdd-6cd5-4aa4-af3e-5c57056a685f")
                        },
                        new
                        {
                            VehicleModelId = new Guid("0791e9ab-0f4f-405b-b912-6acd8ba14234"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4743),
                            Image = "S450",
                            Status = "ACTIVE",
                            VehicleModelName = "S450",
                            VehiclesBrandId = new Guid("5e255fdd-6cd5-4aa4-af3e-5c57056a685f")
                        },
                        new
                        {
                            VehicleModelId = new Guid("ba115ba4-2be7-4085-9ae7-eb9979afa612"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4746),
                            Image = "C300",
                            Status = "ACTIVE",
                            VehicleModelName = "C300",
                            VehiclesBrandId = new Guid("5e255fdd-6cd5-4aa4-af3e-5c57056a685f")
                        },
                        new
                        {
                            VehicleModelId = new Guid("8d584dce-dcb8-4a68-9d22-bc767e68b272"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4755),
                            Image = "C250",
                            Status = "ACTIVE",
                            VehicleModelName = "C250",
                            VehiclesBrandId = new Guid("5e255fdd-6cd5-4aa4-af3e-5c57056a685f")
                        },
                        new
                        {
                            VehicleModelId = new Guid("c69f3d5a-2f26-410b-9ebf-2a76a2687ca6"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4759),
                            Image = "C200",
                            Status = "ACTIVE",
                            VehicleModelName = "C200",
                            VehiclesBrandId = new Guid("5e255fdd-6cd5-4aa4-af3e-5c57056a685f")
                        },
                        new
                        {
                            VehicleModelId = new Guid("38d6cec4-87a6-4c41-970f-28bf420ce7a4"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4763),
                            Image = "GLC 300",
                            Status = "ACTIVE",
                            VehicleModelName = "GLC 300",
                            VehiclesBrandId = new Guid("5e255fdd-6cd5-4aa4-af3e-5c57056a685f")
                        },
                        new
                        {
                            VehicleModelId = new Guid("9117e4d2-cd4b-457f-8be1-8267cd300a59"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4796),
                            Image = "A1",
                            Status = "ACTIVE",
                            VehicleModelName = "A1",
                            VehiclesBrandId = new Guid("1805ade1-1dd8-4bc7-9384-d2f7e7c5f694")
                        },
                        new
                        {
                            VehicleModelId = new Guid("dcbda972-7736-4d1e-8520-63a53e109591"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4800),
                            Image = "A3",
                            Status = "ACTIVE",
                            VehicleModelName = "A3",
                            VehiclesBrandId = new Guid("1805ade1-1dd8-4bc7-9384-d2f7e7c5f694")
                        },
                        new
                        {
                            VehicleModelId = new Guid("88ef915a-2a5e-449e-b523-04a7b8471c85"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4803),
                            Image = "Q7",
                            Status = "ACTIVE",
                            VehicleModelName = "Q7",
                            VehiclesBrandId = new Guid("1805ade1-1dd8-4bc7-9384-d2f7e7c5f694")
                        },
                        new
                        {
                            VehicleModelId = new Guid("485735d2-2fe3-45b4-9144-ed925174c17b"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4813),
                            Image = "A5",
                            Status = "ACTIVE",
                            VehicleModelName = "A5",
                            VehiclesBrandId = new Guid("1805ade1-1dd8-4bc7-9384-d2f7e7c5f694")
                        },
                        new
                        {
                            VehicleModelId = new Guid("f5714569-e829-4a2a-bf25-b56737def027"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4827),
                            Image = "A6",
                            Status = "ACTIVE",
                            VehicleModelName = "A6",
                            VehiclesBrandId = new Guid("1805ade1-1dd8-4bc7-9384-d2f7e7c5f694")
                        },
                        new
                        {
                            VehicleModelId = new Guid("bcee38b3-9d21-478d-9cd0-0fe433ccd581"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4842),
                            Image = "A4",
                            Status = "ACTIVE",
                            VehicleModelName = "A4",
                            VehiclesBrandId = new Guid("1805ade1-1dd8-4bc7-9384-d2f7e7c5f694")
                        },
                        new
                        {
                            VehicleModelId = new Guid("f0276efb-d9e7-42ad-8b84-928e8622d595"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4875),
                            Image = "Vios",
                            Status = "ACTIVE",
                            VehicleModelName = "Vios",
                            VehiclesBrandId = new Guid("5cb06d2e-a8f8-4a76-a021-865c14b0940b")
                        },
                        new
                        {
                            VehicleModelId = new Guid("a1c74dab-6fbb-4b05-8003-3bca50dbf644"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4879),
                            Image = "Yaris",
                            Status = "ACTIVE",
                            VehicleModelName = "Yaris",
                            VehiclesBrandId = new Guid("5cb06d2e-a8f8-4a76-a021-865c14b0940b")
                        },
                        new
                        {
                            VehicleModelId = new Guid("48cafd10-d216-44c1-ad6f-7c2d12375b8f"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4882),
                            Image = "Camry",
                            Status = "ACTIVE",
                            VehicleModelName = "Camry",
                            VehiclesBrandId = new Guid("5cb06d2e-a8f8-4a76-a021-865c14b0940b")
                        },
                        new
                        {
                            VehicleModelId = new Guid("041a5079-a4f6-4e9a-9b92-99d7ef014fcb"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4886),
                            Image = "Fortuner",
                            Status = "ACTIVE",
                            VehicleModelName = "Fortuner",
                            VehiclesBrandId = new Guid("5cb06d2e-a8f8-4a76-a021-865c14b0940b")
                        },
                        new
                        {
                            VehicleModelId = new Guid("0e9a7535-ca80-4a84-829d-81bced580908"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4890),
                            Image = "Alphard",
                            Status = "ACTIVE",
                            VehicleModelName = "Alphard",
                            VehiclesBrandId = new Guid("5cb06d2e-a8f8-4a76-a021-865c14b0940b")
                        },
                        new
                        {
                            VehicleModelId = new Guid("2120d9c6-c231-40ac-af9d-f34930068382"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4897),
                            Image = "Harrier",
                            Status = "ACTIVE",
                            VehicleModelName = "Harrier",
                            VehiclesBrandId = new Guid("5cb06d2e-a8f8-4a76-a021-865c14b0940b")
                        },
                        new
                        {
                            VehicleModelId = new Guid("e7e45f2c-e2ba-4126-b534-1d737ce5f667"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4927),
                            Image = "Civic",
                            Status = "ACTIVE",
                            VehicleModelName = "Civic",
                            VehiclesBrandId = new Guid("ae70dd02-fe0c-4f64-ba6f-b5795fa2b3aa")
                        },
                        new
                        {
                            VehicleModelId = new Guid("a131d150-9d21-46ad-b66b-075cb1234a44"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4931),
                            Image = "City",
                            Status = "ACTIVE",
                            VehicleModelName = "City",
                            VehiclesBrandId = new Guid("ae70dd02-fe0c-4f64-ba6f-b5795fa2b3aa")
                        },
                        new
                        {
                            VehicleModelId = new Guid("9195593e-d74e-4df5-bb31-5b55931ed451"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4934),
                            Image = "Brio",
                            Status = "ACTIVE",
                            VehicleModelName = "Brio",
                            VehiclesBrandId = new Guid("ae70dd02-fe0c-4f64-ba6f-b5795fa2b3aa")
                        },
                        new
                        {
                            VehicleModelId = new Guid("f4210696-3570-45bb-aa9e-f01457aeb1bc"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4937),
                            Image = "Jazz",
                            Status = "ACTIVE",
                            VehicleModelName = "Jazz",
                            VehiclesBrandId = new Guid("ae70dd02-fe0c-4f64-ba6f-b5795fa2b3aa")
                        },
                        new
                        {
                            VehicleModelId = new Guid("fe849207-1ca1-4268-894d-f7a6e90c34a3"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4941),
                            Image = "BR-V",
                            Status = "ACTIVE",
                            VehicleModelName = "BR-V",
                            VehiclesBrandId = new Guid("ae70dd02-fe0c-4f64-ba6f-b5795fa2b3aa")
                        },
                        new
                        {
                            VehicleModelId = new Guid("d2417149-301f-4a3d-85ce-d149c99682fe"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4945),
                            Image = "Ridgeline",
                            Status = "ACTIVE",
                            VehicleModelName = "Ridgeline",
                            VehiclesBrandId = new Guid("ae70dd02-fe0c-4f64-ba6f-b5795fa2b3aa")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Vehicles", b =>
                {
                    b.Property<Guid>("VehiclesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Odo")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehicleModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VehiclesId");

                    b.HasIndex("ClientId");

                    b.HasIndex("VehicleModelId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Domain.Entities.VehiclesBrand", b =>
                {
                    b.Property<Guid>("VehiclesBrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehiclesBrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehiclesBrandId");

                    b.ToTable("VehiclesBrand");

                    b.HasData(
                        new
                        {
                            VehiclesBrandId = new Guid("7c03d318-821e-4030-8d98-5a6fea612827"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(3958),
                            Status = "ACTIVE",
                            VehiclesBrandName = "BMW"
                        },
                        new
                        {
                            VehiclesBrandId = new Guid("5e255fdd-6cd5-4aa4-af3e-5c57056a685f"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4220),
                            Status = "ACTIVE",
                            VehiclesBrandName = "MEC"
                        },
                        new
                        {
                            VehiclesBrandId = new Guid("1805ade1-1dd8-4bc7-9384-d2f7e7c5f694"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4225),
                            Status = "ACTIVE",
                            VehiclesBrandName = "AUDI"
                        },
                        new
                        {
                            VehiclesBrandId = new Guid("5cb06d2e-a8f8-4a76-a021-865c14b0940b"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4228),
                            Status = "ACTIVE",
                            VehiclesBrandName = "TOYOTA"
                        },
                        new
                        {
                            VehiclesBrandId = new Guid("ae70dd02-fe0c-4f64-ba6f-b5795fa2b3aa"),
                            CreatedDate = new DateTime(2024, 6, 14, 19, 54, 19, 437, DateTimeKind.Local).AddTicks(4232),
                            Status = "ACTIVE",
                            VehiclesBrandName = "HONDA"
                        });
                });

            modelBuilder.Entity("Domain.Entities.VehiclesMaintenance", b =>
                {
                    b.Property<Guid>("MaintenanceCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehiclesBrandId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MaintenanceCenterId", "VehiclesBrandId");

                    b.HasIndex("VehiclesBrandId");

                    b.ToTable("VehiclesMaintenances");
                });

            modelBuilder.Entity("Domain.Entities.Admin", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("Admin")
                        .HasForeignKey("Domain.Entities.Admin", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("Bookings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MaintananceSchedule", "MaintananceSchedule")
                        .WithMany("Bookings")
                        .HasForeignKey("MaintananceScheduleId");

                    b.HasOne("Domain.Entities.MaintenanceCenter", "MaintenanceCenter")
                        .WithMany("Bookings")
                        .HasForeignKey("MaintenanceCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Vehicles", "Vehicles")
                        .WithMany("Bookings")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("MaintananceSchedule");

                    b.Navigation("MaintenanceCenter");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("Client")
                        .HasForeignKey("Domain.Entities.Client", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.CustomerCare", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("CustomerCare")
                        .HasForeignKey("Domain.Entities.CustomerCare", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MaintenanceCenter", "MaintenanceCenter")
                        .WithMany("CustomerCares")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("MaintenanceCenter");
                });

            modelBuilder.Entity("Domain.Entities.FeedBack", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceCenter", "MaintenanceCenter")
                        .WithMany("FeedBacks")
                        .HasForeignKey("MaintenanceCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Receipt", "Receipt")
                        .WithOne("FeedBack")
                        .HasForeignKey("Domain.Entities.FeedBack", "ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenanceCenter");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("Domain.Entities.ImageRepairReceipt", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceCenter", "MaintenanceCenter")
                        .WithMany("ImageRepairReceipts")
                        .HasForeignKey("MaintenanceCenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Vehicles", "Vehicle")
                        .WithMany("ImageRepairReceipts")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaintenanceCenter");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.Entities.MaintananceSchedule", b =>
                {
                    b.HasOne("Domain.Entities.VehicleModel", "VehicleModel")
                        .WithMany("MaintenanceSchedules")
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceCenter", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("MaintenanceCenter")
                        .HasForeignKey("Domain.Entities.MaintenanceCenter", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceHistoryStatus", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceInformation", "MaintenanceInformation")
                        .WithMany("MaintenanceHistoryStatuses")
                        .HasForeignKey("MaintenanceInformationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaintenanceInformation");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceInformation", b =>
                {
                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithOne("MaintenanceInformation")
                        .HasForeignKey("Domain.Entities.MaintenanceInformation", "BookingId");

                    b.HasOne("Domain.Entities.CustomerCare", "CustomerCare")
                        .WithMany("InformationMaintenances")
                        .HasForeignKey("CustomerCareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("CustomerCare");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceService", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceCenter", "MaintenanceCenter")
                        .WithMany("MaintenanceServices")
                        .HasForeignKey("MaintenanceCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ServiceCare", "ServiceCare")
                        .WithMany("MaintenanceServices")
                        .HasForeignKey("ServiceCareId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MaintenanceCenter");

                    b.Navigation("ServiceCare");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceServiceCost", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceService", "MaintenanceService")
                        .WithMany("MaintenanceServiceCosts")
                        .HasForeignKey("MaintenanceServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaintenanceService");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceServiceInfo", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceInformation", "InformationMaintenance")
                        .WithMany("MaintenanceServiceInfos")
                        .HasForeignKey("InformationMaintenanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MaintenanceService", "MaintenanceService")
                        .WithMany("MaintenanceServiceInfos")
                        .HasForeignKey("MaintenanceServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InformationMaintenance");

                    b.Navigation("MaintenanceService");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceSparePartInfo", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceInformation", "InformationMaintenance")
                        .WithMany("MaintenanceSparePartInfos")
                        .HasForeignKey("InformationMaintenanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SparePartsItem", "SparePartsItem")
                        .WithMany("MaintenanceSparePartInfos")
                        .HasForeignKey("SparePartsItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InformationMaintenance");

                    b.Navigation("SparePartsItem");
                });

            modelBuilder.Entity("Domain.Entities.Notification", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.OdoHistory", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceInformation", "MaintenanceInformation")
                        .WithOne("OdoHistory")
                        .HasForeignKey("Domain.Entities.OdoHistory", "MaintenanceInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Vehicles", "Vehicles")
                        .WithMany("OdoHistories")
                        .HasForeignKey("VehiclesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaintenanceInformation");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Domain.Entities.Receipt", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceInformation", "InformationMaintenance")
                        .WithOne("Receipt")
                        .HasForeignKey("Domain.Entities.Receipt", "InformationMaintenanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InformationMaintenance");
                });

            modelBuilder.Entity("Domain.Entities.ServiceCare", b =>
                {
                    b.HasOne("Domain.Entities.MaintananceSchedule", "MaintananceSchedule")
                        .WithMany("ServiceCares")
                        .HasForeignKey("MaintananceScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaintananceSchedule");
                });

            modelBuilder.Entity("Domain.Entities.SpareParts", b =>
                {
                    b.HasOne("Domain.Entities.MaintananceSchedule", "MaintananceSchedule")
                        .WithMany("Parts")
                        .HasForeignKey("MaintananceScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaintananceSchedule");
                });

            modelBuilder.Entity("Domain.Entities.SparePartsItem", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceCenter", "MaintenanceCenter")
                        .WithMany("SparePartsItems")
                        .HasForeignKey("MaintenanceCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SpareParts", "SpareParts")
                        .WithMany("SparePartsItems")
                        .HasForeignKey("SparePartsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MaintenanceCenter");

                    b.Navigation("SpareParts");
                });

            modelBuilder.Entity("Domain.Entities.SparePartsItemCost", b =>
                {
                    b.HasOne("Domain.Entities.SparePartsItem", "SparePartsItem")
                        .WithMany("SparePartsItemCost")
                        .HasForeignKey("SparePartsItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SparePartsItem");
                });

            modelBuilder.Entity("Domain.Entities.StaffCare", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("StaffCare")
                        .HasForeignKey("Domain.Entities.StaffCare", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MaintenanceCenter", "MaintenanceCenter")
                        .WithMany("StaffCares")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("MaintenanceCenter");
                });

            modelBuilder.Entity("Domain.Entities.Technician", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceInformation", "InformationMaintenance")
                        .WithMany("Technicians")
                        .HasForeignKey("InformationMaintenanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.StaffCare", "StaffCare")
                        .WithMany("Technicians")
                        .HasForeignKey("StaffCareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InformationMaintenance");

                    b.Navigation("StaffCare");
                });

            modelBuilder.Entity("Domain.Entities.VehicleModel", b =>
                {
                    b.HasOne("Domain.Entities.VehiclesBrand", "VehiclesBrand")
                        .WithMany("VehicleModels")
                        .HasForeignKey("VehiclesBrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VehiclesBrand");
                });

            modelBuilder.Entity("Domain.Entities.Vehicles", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("Vehicles")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.VehicleModel", "VehicleModel")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("Domain.Entities.VehiclesMaintenance", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceCenter", "MaintenanceCenter")
                        .WithMany("VehiclesMaintenance")
                        .HasForeignKey("MaintenanceCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.VehiclesBrand", "VehiclesBrand")
                        .WithMany("VehiclesMaintenance")
                        .HasForeignKey("VehiclesBrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaintenanceCenter");

                    b.Navigation("VehiclesBrand");
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("Client")
                        .IsRequired();

                    b.Navigation("CustomerCare")
                        .IsRequired();

                    b.Navigation("MaintenanceCenter")
                        .IsRequired();

                    b.Navigation("Notifications");

                    b.Navigation("StaffCare")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Navigation("MaintenanceInformation")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Domain.Entities.CustomerCare", b =>
                {
                    b.Navigation("InformationMaintenances");
                });

            modelBuilder.Entity("Domain.Entities.MaintananceSchedule", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Parts");

                    b.Navigation("ServiceCares");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceCenter", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CustomerCares");

                    b.Navigation("FeedBacks");

                    b.Navigation("ImageRepairReceipts");

                    b.Navigation("MaintenanceServices");

                    b.Navigation("SparePartsItems");

                    b.Navigation("StaffCares");

                    b.Navigation("VehiclesMaintenance");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceInformation", b =>
                {
                    b.Navigation("MaintenanceHistoryStatuses");

                    b.Navigation("MaintenanceServiceInfos");

                    b.Navigation("MaintenanceSparePartInfos");

                    b.Navigation("OdoHistory")
                        .IsRequired();

                    b.Navigation("Receipt")
                        .IsRequired();

                    b.Navigation("Technicians");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceService", b =>
                {
                    b.Navigation("MaintenanceServiceCosts");

                    b.Navigation("MaintenanceServiceInfos");
                });

            modelBuilder.Entity("Domain.Entities.Receipt", b =>
                {
                    b.Navigation("FeedBack")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.ServiceCare", b =>
                {
                    b.Navigation("MaintenanceServices");
                });

            modelBuilder.Entity("Domain.Entities.SpareParts", b =>
                {
                    b.Navigation("SparePartsItems");
                });

            modelBuilder.Entity("Domain.Entities.SparePartsItem", b =>
                {
                    b.Navigation("MaintenanceSparePartInfos");

                    b.Navigation("SparePartsItemCost");
                });

            modelBuilder.Entity("Domain.Entities.StaffCare", b =>
                {
                    b.Navigation("Technicians");
                });

            modelBuilder.Entity("Domain.Entities.VehicleModel", b =>
                {
                    b.Navigation("MaintenanceSchedules");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Domain.Entities.Vehicles", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ImageRepairReceipts");

                    b.Navigation("OdoHistories");
                });

            modelBuilder.Entity("Domain.Entities.VehiclesBrand", b =>
                {
                    b.Navigation("VehicleModels");

                    b.Navigation("VehiclesMaintenance");
                });
#pragma warning restore 612, 618
        }
    }
}
