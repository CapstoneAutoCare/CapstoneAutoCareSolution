// <auto-generated />
using System;
using Application;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Application.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240611201820_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountID = new Guid("c2290782-da92-4eb2-9dac-f58af6ffb3b4"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7006),
                            Email = "center1",
                            Gender = "1",
                            Logo = "1",
                            Password = "1",
                            Phone = "1",
                            Role = "CENTER",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            AccountID = new Guid("66140116-49c5-4ca5-988e-a9735bf9527f"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7019),
                            Email = "center2",
                            Gender = "1",
                            Logo = "1",
                            Password = "1",
                            Phone = "1",
                            Role = "CENTER",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            AccountID = new Guid("76aed2bd-0f45-4825-abdd-beb4b1159490"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7156),
                            Email = "c1",
                            Gender = "1",
                            Logo = "1",
                            Password = "1",
                            Phone = "1",
                            Role = "CLIENT",
                            Status = "ACTIVE"
                        },
                        new
                        {
                            AccountID = new Guid("1bb62188-ae64-45d5-a87f-c9e219da77ff"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7164),
                            Email = "c2",
                            Gender = "1",
                            Logo = "1",
                            Password = "1",
                            Phone = "1",
                            Role = "CLIENT",
                            Status = "ACTIVE"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Admin", b =>
                {
                    b.Property<Guid>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AdminId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("MaintananceScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MaintenanceCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookingId");

                    b.HasIndex("ClientId");

                    b.HasIndex("MaintananceScheduleId");

                    b.HasIndex("MaintenanceCenterId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = new Guid("ea669325-74a5-435a-bebb-846c134ac6e7"),
                            AccountId = new Guid("76aed2bd-0f45-4825-abdd-beb4b1159490"),
                            Address = "98C Đ. Hồ Bá Phấn, Phước Long A, Thủ Đức, Thành phố Hồ Chí Minh",
                            Birthday = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7152),
                            FirstName = "P",
                            LastName = "D"
                        },
                        new
                        {
                            ClientId = new Guid("e856c18d-a787-4931-b359-25fc22d007f6"),
                            AccountId = new Guid("1bb62188-ae64-45d5-a87f-c9e219da77ff"),
                            Address = "98C Đ. Hồ Bá Phấn, Phước Long A, Thủ Đức, Thành phố Hồ Chí Minh",
                            Birthday = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7161),
                            FirstName = "F",
                            LastName = "L"
                        });
                });

            modelBuilder.Entity("Domain.Entities.CustomerCare", b =>
                {
                    b.Property<Guid>("CustomerCareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerCareDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerCareId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("CenterId");

                    b.ToTable("CustomerCares");
                });

            modelBuilder.Entity("Domain.Entities.FeedBack", b =>
                {
                    b.Property<Guid>("FeedBackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MaintenanceCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Vote")
                        .HasColumnType("int");

                    b.HasKey("FeedBackId");

                    b.HasIndex("MaintenanceCenterId");

                    b.HasIndex("ReceiptId")
                        .IsUnique();

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("Domain.Entities.ImageRepairReceipt", b =>
                {
                    b.Property<Guid>("ImageRepairReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MaintenanceCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ImageRepairReceiptId");

                    b.HasIndex("MaintenanceCenterId");

                    b.HasIndex("VehicleId");

                    b.ToTable("ImageRepairReceipts");
                });

            modelBuilder.Entity("Domain.Entities.MaintananceSchedule", b =>
                {
                    b.Property<Guid>("MaintananceScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaintananceScheduleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehicleModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MaintananceScheduleId");

                    b.HasIndex("VehicleModelId");

                    b.ToTable("MaintananceSchedules");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceCenter", b =>
                {
                    b.Property<Guid>("MaintenanceCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaintenanceCenterDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaintenanceCenterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.HasKey("MaintenanceCenterId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("MaintenanceCenters");

                    b.HasData(
                        new
                        {
                            MaintenanceCenterId = new Guid("f308446e-c60c-4c29-b911-c3db272a4e83"),
                            AccountId = new Guid("c2290782-da92-4eb2-9dac-f58af6ffb3b4"),
                            Address = "98C Đ. Hồ Bá Phấn, Phước Long A, Thủ Đức, Thành phố Hồ Chí Minh",
                            City = "Thành phố Hồ Chí Minh",
                            Country = "VN",
                            CreateDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(6995),
                            District = "Quận 9",
                            MaintenanceCenterDescription = "Gara Phi Long Ô Tô BK",
                            MaintenanceCenterName = "Gara Phi Long Ô Tô BK",
                            Rating = 5f
                        },
                        new
                        {
                            MaintenanceCenterId = new Guid("c1d12eaf-1d29-48e9-aa20-5efef61b7154"),
                            AccountId = new Guid("66140116-49c5-4ca5-988e-a9735bf9527f"),
                            Address = "98C Đ. Hồ Bá Phấn, Phước Long A, Thủ Đức, Thành phố Hồ Chí Minh",
                            City = "Thành phố Hồ Chí Minh",
                            Country = "VN",
                            CreateDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7012),
                            District = "Quận 9",
                            MaintenanceCenterDescription = "Gara Phi Long Ô Tô BK",
                            MaintenanceCenterName = "Gara Phi Long Ô Tô BK",
                            Rating = 5f
                        });
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceHistoryStatus", b =>
                {
                    b.Property<Guid>("MaintenanceHistoryStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MaintenanceInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaintenanceHistoryStatusId");

                    b.HasIndex("MaintenanceInformationId");

                    b.ToTable("MaintenanceHistoryStatuses");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceInformation", b =>
                {
                    b.Property<Guid>("InformationMaintenanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CustomerCareId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FinishedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InformationMaintenanceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("InformationMaintenanceId");

                    b.HasIndex("BookingId")
                        .IsUnique()
                        .HasFilter("[BookingId] IS NOT NULL");

                    b.HasIndex("CustomerCareId");

                    b.ToTable("MaintenanceInformations");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceService", b =>
                {
                    b.Property<Guid>("MaintenanceServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("MaintenanceCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceCareId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaintenanceServiceId");

                    b.HasIndex("MaintenanceCenterId");

                    b.HasIndex("ServiceCareId");

                    b.ToTable("MaintenanceServices");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceServiceCost", b =>
                {
                    b.Property<Guid>("MaintenanceServiceCostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ActuralCost")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MaintenanceServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaintenanceServiceCostId");

                    b.HasIndex("MaintenanceServiceId");

                    b.ToTable("MaintenanceServiceCosts");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceServiceInfo", b =>
                {
                    b.Property<Guid>("MaintenanceServiceInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ActualCost")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<Guid>("InformationMaintenanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MaintenanceServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaintenanceServiceInfoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.HasKey("MaintenanceServiceInfoId");

                    b.HasIndex("MaintenanceServiceId");

                    b.HasIndex("InformationMaintenanceId", "MaintenanceServiceId")
                        .IsUnique()
                        .HasFilter("[MaintenanceServiceId] IS NOT NULL");

                    b.ToTable("MaintenanceServiceInfos");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceSparePartInfo", b =>
                {
                    b.Property<Guid>("MaintenanceSparePartInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ActualCost")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<Guid>("InformationMaintenanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaintenanceSparePartInfoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SparePartsItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.HasKey("MaintenanceSparePartInfoId");

                    b.HasIndex("SparePartsItemId");

                    b.HasIndex("InformationMaintenanceId", "SparePartsItemId")
                        .IsUnique()
                        .HasFilter("[SparePartsItemId] IS NOT NULL");

                    b.ToTable("MaintenanceSparePartInfos");
                });

            modelBuilder.Entity("Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.HasIndex("AccountId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Domain.Entities.OdoHistory", b =>
                {
                    b.Property<Guid>("OdoHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MaintenanceInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Odo")
                        .HasColumnType("int");

                    b.Property<string>("OdoHistoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehiclesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OdoHistoryId");

                    b.HasIndex("MaintenanceInformationId")
                        .IsUnique();

                    b.HasIndex("VehiclesId");

                    b.ToTable("OdoHistories");
                });

            modelBuilder.Entity("Domain.Entities.Receipt", b =>
                {
                    b.Property<Guid>("ReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InformationMaintenanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReceiptName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<int>("VAT")
                        .HasColumnType("int");

                    b.HasKey("ReceiptId");

                    b.HasIndex("InformationMaintenanceId")
                        .IsUnique();

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("Domain.Entities.ServiceCare", b =>
                {
                    b.Property<Guid>("ServiceCareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("MaintananceScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("OriginalPrice")
                        .HasColumnType("float");

                    b.Property<string>("ServiceCareDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceCareName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceCareType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceCareId");

                    b.HasIndex("MaintananceScheduleId");

                    b.ToTable("ServiceCares");
                });

            modelBuilder.Entity("Domain.Entities.SpareParts", b =>
                {
                    b.Property<Guid>("SparePartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("MaintananceScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("OriginalPrice")
                        .HasColumnType("float");

                    b.Property<string>("SparePartDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SparePartName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SparePartType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SparePartId");

                    b.HasIndex("MaintananceScheduleId");

                    b.ToTable("SpareParts");
                });

            modelBuilder.Entity("Domain.Entities.SparePartsItem", b =>
                {
                    b.Property<Guid>("SparePartsItemtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("MaintenanceCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SparePartsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SparePartsItemtId");

                    b.HasIndex("MaintenanceCenterId");

                    b.HasIndex("SparePartsId");

                    b.ToTable("SparePartsItem");
                });

            modelBuilder.Entity("Domain.Entities.SparePartsItemCost", b =>
                {
                    b.Property<Guid>("SparePartsItemCostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ActuralCost")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SparePartsItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SparePartsItemCostId");

                    b.HasIndex("SparePartsItemId");

                    b.ToTable("SparePartsItemCosts");
                });

            modelBuilder.Entity("Domain.Entities.StaffCare", b =>
                {
                    b.Property<Guid>("StaffCareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffCareDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffCareId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("CenterId");

                    b.ToTable("StaffCares");
                });

            modelBuilder.Entity("Domain.Entities.Technician", b =>
                {
                    b.Property<Guid>("TechnicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("InformationMaintenanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaffCareId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechnicialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("UnitCost")
                        .HasColumnType("float");

                    b.HasKey("TechnicianId");

                    b.HasIndex("InformationMaintenanceId");

                    b.HasIndex("StaffCareId");

                    b.ToTable("Technician");
                });

            modelBuilder.Entity("Domain.Entities.VehicleModel", b =>
                {
                    b.Property<Guid>("VehicleModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehiclesBrandId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VehicleModelId");

                    b.HasIndex("VehiclesBrandId");

                    b.ToTable("VehicleModel");

                    b.HasData(
                        new
                        {
                            VehicleModelId = new Guid("9f394d47-1b85-48c1-9ac9-c2cd55ca067a"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7273),
                            Image = "320i",
                            Status = "ACTIVE",
                            VehicleModelName = "320i",
                            VehiclesBrandId = new Guid("6858fac1-cc7a-48ad-b932-c87ce8007e41")
                        },
                        new
                        {
                            VehicleModelId = new Guid("1d84739a-2708-4b78-aa99-f9b032cc3ccd"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7279),
                            Image = "328i",
                            Status = "ACTIVE",
                            VehicleModelName = "328i",
                            VehiclesBrandId = new Guid("6858fac1-cc7a-48ad-b932-c87ce8007e41")
                        },
                        new
                        {
                            VehicleModelId = new Guid("c1962bf0-f2af-4aa3-a65a-2435e1533827"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7282),
                            Image = "330i",
                            Status = "ACTIVE",
                            VehicleModelName = "330i",
                            VehiclesBrandId = new Guid("6858fac1-cc7a-48ad-b932-c87ce8007e41")
                        },
                        new
                        {
                            VehicleModelId = new Guid("14a3b3e5-49d3-4c15-8296-df58a1d82d11"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7288),
                            Image = "i7",
                            Status = "ACTIVE",
                            VehicleModelName = "i7",
                            VehiclesBrandId = new Guid("6858fac1-cc7a-48ad-b932-c87ce8007e41")
                        },
                        new
                        {
                            VehicleModelId = new Guid("191a8325-014f-49c5-a15f-ef8d222c53e8"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7292),
                            Image = "740Li",
                            Status = "ACTIVE",
                            VehicleModelName = "740Li",
                            VehiclesBrandId = new Guid("6858fac1-cc7a-48ad-b932-c87ce8007e41")
                        },
                        new
                        {
                            VehicleModelId = new Guid("d2b94e36-0de2-4ba7-9326-6f8a9a9b11c2"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7297),
                            Image = "M6",
                            Status = "ACTIVE",
                            VehicleModelName = "M6",
                            VehiclesBrandId = new Guid("6858fac1-cc7a-48ad-b932-c87ce8007e41")
                        },
                        new
                        {
                            VehicleModelId = new Guid("acf67e48-869a-4f7f-a40f-798dc8904f79"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7339),
                            Image = "E180",
                            Status = "ACTIVE",
                            VehicleModelName = "E180",
                            VehiclesBrandId = new Guid("0e7251f1-315f-4e5b-aaff-5362d4f89abe")
                        },
                        new
                        {
                            VehicleModelId = new Guid("ba740480-3786-4231-bbf5-75cce3be44eb"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7343),
                            Image = "S450",
                            Status = "ACTIVE",
                            VehicleModelName = "S450",
                            VehiclesBrandId = new Guid("0e7251f1-315f-4e5b-aaff-5362d4f89abe")
                        },
                        new
                        {
                            VehicleModelId = new Guid("4659bbc7-ef66-44e9-bd15-12c643dae850"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7346),
                            Image = "C300",
                            Status = "ACTIVE",
                            VehicleModelName = "C300",
                            VehiclesBrandId = new Guid("0e7251f1-315f-4e5b-aaff-5362d4f89abe")
                        },
                        new
                        {
                            VehicleModelId = new Guid("c9cfaf8f-1170-40ac-899f-38b160bb8a2c"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7349),
                            Image = "C250",
                            Status = "ACTIVE",
                            VehicleModelName = "C250",
                            VehiclesBrandId = new Guid("0e7251f1-315f-4e5b-aaff-5362d4f89abe")
                        },
                        new
                        {
                            VehicleModelId = new Guid("64c918c6-3df2-4a60-bc44-62ee983de65b"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7352),
                            Image = "C200",
                            Status = "ACTIVE",
                            VehicleModelName = "C200",
                            VehiclesBrandId = new Guid("0e7251f1-315f-4e5b-aaff-5362d4f89abe")
                        },
                        new
                        {
                            VehicleModelId = new Guid("80964d7e-3e9f-4f00-af93-94854933520d"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7359),
                            Image = "GLC 300",
                            Status = "ACTIVE",
                            VehicleModelName = "GLC 300",
                            VehiclesBrandId = new Guid("0e7251f1-315f-4e5b-aaff-5362d4f89abe")
                        },
                        new
                        {
                            VehicleModelId = new Guid("2776370a-a95c-4c34-8213-3d2f9c3fe5bf"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7389),
                            Image = "A1",
                            Status = "ACTIVE",
                            VehicleModelName = "A1",
                            VehiclesBrandId = new Guid("550b8d4f-ce2b-4c11-8c34-9847ad34bb3e")
                        },
                        new
                        {
                            VehicleModelId = new Guid("e6cc0e27-172f-4412-b206-e4b1bc7e1e38"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7393),
                            Image = "A3",
                            Status = "ACTIVE",
                            VehicleModelName = "A3",
                            VehiclesBrandId = new Guid("550b8d4f-ce2b-4c11-8c34-9847ad34bb3e")
                        },
                        new
                        {
                            VehicleModelId = new Guid("d49b07fa-425f-4bca-8e41-1af469cf972c"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7397),
                            Image = "Q7",
                            Status = "ACTIVE",
                            VehicleModelName = "Q7",
                            VehiclesBrandId = new Guid("550b8d4f-ce2b-4c11-8c34-9847ad34bb3e")
                        },
                        new
                        {
                            VehicleModelId = new Guid("a2f265e0-dfd4-4a09-b814-57cbab5c76af"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7400),
                            Image = "A5",
                            Status = "ACTIVE",
                            VehicleModelName = "A5",
                            VehiclesBrandId = new Guid("550b8d4f-ce2b-4c11-8c34-9847ad34bb3e")
                        },
                        new
                        {
                            VehicleModelId = new Guid("cbb0713f-edf0-4ceb-b1bd-d74f60dd2929"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7403),
                            Image = "A6",
                            Status = "ACTIVE",
                            VehicleModelName = "A6",
                            VehiclesBrandId = new Guid("550b8d4f-ce2b-4c11-8c34-9847ad34bb3e")
                        },
                        new
                        {
                            VehicleModelId = new Guid("4db9a332-b2db-4ec2-bacc-f4e0a94ad4cf"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7407),
                            Image = "A4",
                            Status = "ACTIVE",
                            VehicleModelName = "A4",
                            VehiclesBrandId = new Guid("550b8d4f-ce2b-4c11-8c34-9847ad34bb3e")
                        },
                        new
                        {
                            VehicleModelId = new Guid("d6b25e0c-22ee-4a5a-9e92-efe8fc24c8cc"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7435),
                            Image = "Vios",
                            Status = "ACTIVE",
                            VehicleModelName = "Vios",
                            VehiclesBrandId = new Guid("273fb064-92ae-4987-8714-769a3577f0b6")
                        },
                        new
                        {
                            VehicleModelId = new Guid("ec49bb97-5e3c-4cff-93cb-47160cef17dc"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7442),
                            Image = "Yaris",
                            Status = "ACTIVE",
                            VehicleModelName = "Yaris",
                            VehiclesBrandId = new Guid("273fb064-92ae-4987-8714-769a3577f0b6")
                        },
                        new
                        {
                            VehicleModelId = new Guid("ba7caa05-ec8d-4b09-a379-f1298bd22afd"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7445),
                            Image = "Camry",
                            Status = "ACTIVE",
                            VehicleModelName = "Camry",
                            VehiclesBrandId = new Guid("273fb064-92ae-4987-8714-769a3577f0b6")
                        },
                        new
                        {
                            VehicleModelId = new Guid("25581285-c34f-4068-85ad-b7718b6dc17e"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7454),
                            Image = "Fortuner",
                            Status = "ACTIVE",
                            VehicleModelName = "Fortuner",
                            VehiclesBrandId = new Guid("273fb064-92ae-4987-8714-769a3577f0b6")
                        },
                        new
                        {
                            VehicleModelId = new Guid("7a2c7ab4-63a7-4dda-bb6d-c6f6d788774b"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7457),
                            Image = "Alphard",
                            Status = "ACTIVE",
                            VehicleModelName = "Alphard",
                            VehiclesBrandId = new Guid("273fb064-92ae-4987-8714-769a3577f0b6")
                        },
                        new
                        {
                            VehicleModelId = new Guid("2f1c6283-a81f-4b45-9fc4-9c52c825ef53"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7462),
                            Image = "Harrier",
                            Status = "ACTIVE",
                            VehicleModelName = "Harrier",
                            VehiclesBrandId = new Guid("273fb064-92ae-4987-8714-769a3577f0b6")
                        },
                        new
                        {
                            VehicleModelId = new Guid("331130ee-2a50-432b-ad72-d2504226b6bb"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7488),
                            Image = "Civic",
                            Status = "ACTIVE",
                            VehicleModelName = "Civic",
                            VehiclesBrandId = new Guid("68928060-a94e-4ca5-b8d3-a1a51f7c0209")
                        },
                        new
                        {
                            VehicleModelId = new Guid("aeb6ec81-d254-44f9-b3e8-d2cfdc7a02ba"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7493),
                            Image = "City",
                            Status = "ACTIVE",
                            VehicleModelName = "City",
                            VehiclesBrandId = new Guid("68928060-a94e-4ca5-b8d3-a1a51f7c0209")
                        },
                        new
                        {
                            VehicleModelId = new Guid("e13550a1-802c-4171-ad48-01fb7199c88d"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7496),
                            Image = "Brio",
                            Status = "ACTIVE",
                            VehicleModelName = "Brio",
                            VehiclesBrandId = new Guid("68928060-a94e-4ca5-b8d3-a1a51f7c0209")
                        },
                        new
                        {
                            VehicleModelId = new Guid("28b5d468-3d1d-4e4b-87e8-20e558df3866"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7502),
                            Image = "Jazz",
                            Status = "ACTIVE",
                            VehicleModelName = "Jazz",
                            VehiclesBrandId = new Guid("68928060-a94e-4ca5-b8d3-a1a51f7c0209")
                        },
                        new
                        {
                            VehicleModelId = new Guid("ffd61408-5d75-496c-a766-165b5192086f"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7505),
                            Image = "BR-V",
                            Status = "ACTIVE",
                            VehicleModelName = "BR-V",
                            VehiclesBrandId = new Guid("68928060-a94e-4ca5-b8d3-a1a51f7c0209")
                        },
                        new
                        {
                            VehicleModelId = new Guid("479ed113-6b70-48b3-b836-e956c98ef00d"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7509),
                            Image = "Ridgeline",
                            Status = "ACTIVE",
                            VehicleModelName = "Ridgeline",
                            VehiclesBrandId = new Guid("68928060-a94e-4ca5-b8d3-a1a51f7c0209")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Vehicles", b =>
                {
                    b.Property<Guid>("VehiclesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Odo")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehicleModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VehiclesId");

                    b.HasIndex("ClientId");

                    b.HasIndex("VehicleModelId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            VehiclesId = new Guid("b2b732fb-6faa-4907-87c7-95bb65a8ad3e"),
                            ClientId = new Guid("ea669325-74a5-435a-bebb-846c134ac6e7"),
                            Color = "RED",
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7544),
                            Description = "Vehicle",
                            LicensePlate = "1111",
                            Odo = 1000,
                            Status = "ACTIVE",
                            VehicleModelId = new Guid("331130ee-2a50-432b-ad72-d2504226b6bb")
                        },
                        new
                        {
                            VehiclesId = new Guid("40aea3e7-867b-4d49-877e-52a1566efaf3"),
                            ClientId = new Guid("ea669325-74a5-435a-bebb-846c134ac6e7"),
                            Color = "BLUE",
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7550),
                            Description = "Vehicle",
                            LicensePlate = "1112",
                            Odo = 10000,
                            Status = "ACTIVE",
                            VehicleModelId = new Guid("331130ee-2a50-432b-ad72-d2504226b6bb")
                        },
                        new
                        {
                            VehiclesId = new Guid("59a4c87a-38ee-4f99-bfba-d4084bc1506e"),
                            ClientId = new Guid("ea669325-74a5-435a-bebb-846c134ac6e7"),
                            Color = "RED",
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7613),
                            Description = "Vehicle",
                            LicensePlate = "1111",
                            Odo = 1000,
                            Status = "ACTIVE",
                            VehicleModelId = new Guid("aeb6ec81-d254-44f9-b3e8-d2cfdc7a02ba")
                        },
                        new
                        {
                            VehiclesId = new Guid("46d11c73-7db1-44ea-9449-82f7251e12d4"),
                            ClientId = new Guid("ea669325-74a5-435a-bebb-846c134ac6e7"),
                            Color = "BLUE",
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7616),
                            Description = "Vehicle",
                            LicensePlate = "1112",
                            Odo = 10000,
                            Status = "ACTIVE",
                            VehicleModelId = new Guid("aeb6ec81-d254-44f9-b3e8-d2cfdc7a02ba")
                        },
                        new
                        {
                            VehiclesId = new Guid("e0069d95-8c46-41e9-8323-587197adeb17"),
                            ClientId = new Guid("ea669325-74a5-435a-bebb-846c134ac6e7"),
                            Color = "RED",
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7638),
                            Description = "Vehicle",
                            LicensePlate = "1111",
                            Odo = 1000,
                            Status = "ACTIVE",
                            VehicleModelId = new Guid("e13550a1-802c-4171-ad48-01fb7199c88d")
                        },
                        new
                        {
                            VehiclesId = new Guid("80ba7c60-ec95-4589-87e3-76485559edda"),
                            ClientId = new Guid("ea669325-74a5-435a-bebb-846c134ac6e7"),
                            Color = "BLUE",
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7644),
                            Description = "Vehicle",
                            LicensePlate = "1112",
                            Odo = 10000,
                            Status = "ACTIVE",
                            VehicleModelId = new Guid("e13550a1-802c-4171-ad48-01fb7199c88d")
                        },
                        new
                        {
                            VehiclesId = new Guid("d673cec0-62da-4f48-8c3d-e247925c5d91"),
                            ClientId = new Guid("ea669325-74a5-435a-bebb-846c134ac6e7"),
                            Color = "RED",
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7665),
                            Description = "Vehicle",
                            LicensePlate = "1111",
                            Odo = 1000,
                            Status = "ACTIVE",
                            VehicleModelId = new Guid("28b5d468-3d1d-4e4b-87e8-20e558df3866")
                        },
                        new
                        {
                            VehiclesId = new Guid("e19c3f95-606e-439c-abeb-a0754b69cdd3"),
                            ClientId = new Guid("ea669325-74a5-435a-bebb-846c134ac6e7"),
                            Color = "BLUE",
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7669),
                            Description = "Vehicle",
                            LicensePlate = "1112",
                            Odo = 10000,
                            Status = "ACTIVE",
                            VehicleModelId = new Guid("28b5d468-3d1d-4e4b-87e8-20e558df3866")
                        },
                        new
                        {
                            VehiclesId = new Guid("dc57e7fa-5f32-4c2a-8921-f8067fea3fe8"),
                            ClientId = new Guid("ea669325-74a5-435a-bebb-846c134ac6e7"),
                            Color = "RED",
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7689),
                            Description = "Vehicle",
                            LicensePlate = "1111",
                            Odo = 1000,
                            Status = "ACTIVE",
                            VehicleModelId = new Guid("ffd61408-5d75-496c-a766-165b5192086f")
                        },
                        new
                        {
                            VehiclesId = new Guid("8c16cff7-d39c-45f9-b013-e1a74dc2a2b2"),
                            ClientId = new Guid("ea669325-74a5-435a-bebb-846c134ac6e7"),
                            Color = "BLUE",
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7692),
                            Description = "Vehicle",
                            LicensePlate = "1112",
                            Odo = 10000,
                            Status = "ACTIVE",
                            VehicleModelId = new Guid("ffd61408-5d75-496c-a766-165b5192086f")
                        },
                        new
                        {
                            VehiclesId = new Guid("6b8176b5-5840-4680-824f-6a0d3b3966da"),
                            ClientId = new Guid("ea669325-74a5-435a-bebb-846c134ac6e7"),
                            Color = "RED",
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7719),
                            Description = "Vehicle",
                            LicensePlate = "1111",
                            Odo = 1000,
                            Status = "ACTIVE",
                            VehicleModelId = new Guid("479ed113-6b70-48b3-b836-e956c98ef00d")
                        },
                        new
                        {
                            VehiclesId = new Guid("091ac76b-6665-4ef4-b140-a5f56e7fba1d"),
                            ClientId = new Guid("ea669325-74a5-435a-bebb-846c134ac6e7"),
                            Color = "BLUE",
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7722),
                            Description = "Vehicle",
                            LicensePlate = "1112",
                            Odo = 10000,
                            Status = "ACTIVE",
                            VehicleModelId = new Guid("479ed113-6b70-48b3-b836-e956c98ef00d")
                        },
                        new
                        {
                            VehiclesId = new Guid("b99ead2b-0296-4e7e-9fa4-07f1308930c7"),
                            ClientId = new Guid("e856c18d-a787-4931-b359-25fc22d007f6"),
                            Color = "RED",
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7743),
                            Description = "Vehicle",
                            LicensePlate = "1111",
                            Odo = 1000,
                            Status = "ACTIVE",
                            VehicleModelId = new Guid("331130ee-2a50-432b-ad72-d2504226b6bb")
                        },
                        new
                        {
                            VehiclesId = new Guid("dd428279-261d-494e-b929-bae9da499911"),
                            ClientId = new Guid("e856c18d-a787-4931-b359-25fc22d007f6"),
                            Color = "BLUE",
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7749),
                            Description = "Vehicle",
                            LicensePlate = "1112",
                            Odo = 10000,
                            Status = "ACTIVE",
                            VehicleModelId = new Guid("331130ee-2a50-432b-ad72-d2504226b6bb")
                        },
                        new
                        {
                            VehiclesId = new Guid("69985689-3c8d-43e4-96d5-86f13cdd6806"),
                            ClientId = new Guid("e856c18d-a787-4931-b359-25fc22d007f6"),
                            Color = "RED",
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7768),
                            Description = "Vehicle",
                            LicensePlate = "1111",
                            Odo = 1000,
                            Status = "ACTIVE",
                            VehicleModelId = new Guid("aeb6ec81-d254-44f9-b3e8-d2cfdc7a02ba")
                        },
                        new
                        {
                            VehiclesId = new Guid("8280fc69-c494-4a7e-964b-3f2ce1e51b96"),
                            ClientId = new Guid("e856c18d-a787-4931-b359-25fc22d007f6"),
                            Color = "BLUE",
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7771),
                            Description = "Vehicle",
                            LicensePlate = "1112",
                            Odo = 10000,
                            Status = "ACTIVE",
                            VehicleModelId = new Guid("aeb6ec81-d254-44f9-b3e8-d2cfdc7a02ba")
                        },
                        new
                        {
                            VehiclesId = new Guid("fa0d12a7-f252-40ce-a065-74dfe5ff8f3d"),
                            ClientId = new Guid("e856c18d-a787-4931-b359-25fc22d007f6"),
                            Color = "RED",
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7790),
                            Description = "Vehicle",
                            LicensePlate = "1111",
                            Odo = 1000,
                            Status = "ACTIVE",
                            VehicleModelId = new Guid("e13550a1-802c-4171-ad48-01fb7199c88d")
                        },
                        new
                        {
                            VehiclesId = new Guid("db2fa383-9d77-4521-b130-61cbfaef34c2"),
                            ClientId = new Guid("e856c18d-a787-4931-b359-25fc22d007f6"),
                            Color = "BLUE",
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7794),
                            Description = "Vehicle",
                            LicensePlate = "1112",
                            Odo = 10000,
                            Status = "ACTIVE",
                            VehicleModelId = new Guid("e13550a1-802c-4171-ad48-01fb7199c88d")
                        },
                        new
                        {
                            VehiclesId = new Guid("b755ff48-1d79-4b0e-8948-1fb07de1d56a"),
                            ClientId = new Guid("e856c18d-a787-4931-b359-25fc22d007f6"),
                            Color = "RED",
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7814),
                            Description = "Vehicle",
                            LicensePlate = "1111",
                            Odo = 1000,
                            Status = "ACTIVE",
                            VehicleModelId = new Guid("28b5d468-3d1d-4e4b-87e8-20e558df3866")
                        },
                        new
                        {
                            VehiclesId = new Guid("0ff1995e-324c-4ba5-aa10-2b8d2ab6c185"),
                            ClientId = new Guid("e856c18d-a787-4931-b359-25fc22d007f6"),
                            Color = "BLUE",
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7817),
                            Description = "Vehicle",
                            LicensePlate = "1112",
                            Odo = 10000,
                            Status = "ACTIVE",
                            VehicleModelId = new Guid("28b5d468-3d1d-4e4b-87e8-20e558df3866")
                        },
                        new
                        {
                            VehiclesId = new Guid("1f9f7199-365c-472f-8a43-338b5a9ee3c8"),
                            ClientId = new Guid("e856c18d-a787-4931-b359-25fc22d007f6"),
                            Color = "RED",
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7836),
                            Description = "Vehicle",
                            LicensePlate = "1111",
                            Odo = 1000,
                            Status = "ACTIVE",
                            VehicleModelId = new Guid("ffd61408-5d75-496c-a766-165b5192086f")
                        },
                        new
                        {
                            VehiclesId = new Guid("58eea64a-72d5-46b4-b611-ca39eef441b0"),
                            ClientId = new Guid("e856c18d-a787-4931-b359-25fc22d007f6"),
                            Color = "BLUE",
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7842),
                            Description = "Vehicle",
                            LicensePlate = "1112",
                            Odo = 10000,
                            Status = "ACTIVE",
                            VehicleModelId = new Guid("ffd61408-5d75-496c-a766-165b5192086f")
                        },
                        new
                        {
                            VehiclesId = new Guid("03e482cc-7014-4391-903d-387639d52c35"),
                            ClientId = new Guid("e856c18d-a787-4931-b359-25fc22d007f6"),
                            Color = "RED",
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7860),
                            Description = "Vehicle",
                            LicensePlate = "1111",
                            Odo = 1000,
                            Status = "ACTIVE",
                            VehicleModelId = new Guid("479ed113-6b70-48b3-b836-e956c98ef00d")
                        },
                        new
                        {
                            VehiclesId = new Guid("613895a8-befd-4d3d-a820-b62d8b331d63"),
                            ClientId = new Guid("e856c18d-a787-4931-b359-25fc22d007f6"),
                            Color = "BLUE",
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(7863),
                            Description = "Vehicle",
                            LicensePlate = "1112",
                            Odo = 10000,
                            Status = "ACTIVE",
                            VehicleModelId = new Guid("479ed113-6b70-48b3-b836-e956c98ef00d")
                        });
                });

            modelBuilder.Entity("Domain.Entities.VehiclesBrand", b =>
                {
                    b.Property<Guid>("VehiclesBrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehiclesBrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehiclesBrandId");

                    b.ToTable("VehiclesBrand");

                    b.HasData(
                        new
                        {
                            VehiclesBrandId = new Guid("6858fac1-cc7a-48ad-b932-c87ce8007e41"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(6537),
                            Status = "ACTIVE",
                            VehiclesBrandName = "BMW"
                        },
                        new
                        {
                            VehiclesBrandId = new Guid("0e7251f1-315f-4e5b-aaff-5362d4f89abe"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(6846),
                            Status = "ACTIVE",
                            VehiclesBrandName = "MEC"
                        },
                        new
                        {
                            VehiclesBrandId = new Guid("550b8d4f-ce2b-4c11-8c34-9847ad34bb3e"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(6855),
                            Status = "ACTIVE",
                            VehiclesBrandName = "AUDI"
                        },
                        new
                        {
                            VehiclesBrandId = new Guid("273fb064-92ae-4987-8714-769a3577f0b6"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(6859),
                            Status = "ACTIVE",
                            VehiclesBrandName = "TOYOTA"
                        },
                        new
                        {
                            VehiclesBrandId = new Guid("68928060-a94e-4ca5-b8d3-a1a51f7c0209"),
                            CreatedDate = new DateTime(2024, 6, 12, 3, 18, 19, 837, DateTimeKind.Local).AddTicks(6863),
                            Status = "ACTIVE",
                            VehiclesBrandName = "HONDA"
                        });
                });

            modelBuilder.Entity("Domain.Entities.VehiclesMaintenance", b =>
                {
                    b.Property<Guid>("MaintenanceCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehiclesBrandId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MaintenanceCenterId", "VehiclesBrandId");

                    b.HasIndex("VehiclesBrandId");

                    b.ToTable("VehiclesMaintenances");
                });

            modelBuilder.Entity("Domain.Entities.Admin", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("Admin")
                        .HasForeignKey("Domain.Entities.Admin", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("Bookings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MaintananceSchedule", "MaintananceSchedule")
                        .WithMany("Bookings")
                        .HasForeignKey("MaintananceScheduleId");

                    b.HasOne("Domain.Entities.MaintenanceCenter", "MaintenanceCenter")
                        .WithMany("Bookings")
                        .HasForeignKey("MaintenanceCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Vehicles", "Vehicles")
                        .WithMany("Bookings")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("MaintananceSchedule");

                    b.Navigation("MaintenanceCenter");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("Client")
                        .HasForeignKey("Domain.Entities.Client", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.CustomerCare", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("CustomerCare")
                        .HasForeignKey("Domain.Entities.CustomerCare", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MaintenanceCenter", "MaintenanceCenter")
                        .WithMany("CustomerCares")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("MaintenanceCenter");
                });

            modelBuilder.Entity("Domain.Entities.FeedBack", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceCenter", "MaintenanceCenter")
                        .WithMany("FeedBacks")
                        .HasForeignKey("MaintenanceCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Receipt", "Receipt")
                        .WithOne("FeedBack")
                        .HasForeignKey("Domain.Entities.FeedBack", "ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenanceCenter");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("Domain.Entities.ImageRepairReceipt", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceCenter", "MaintenanceCenter")
                        .WithMany("ImageRepairReceipts")
                        .HasForeignKey("MaintenanceCenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Vehicles", "Vehicle")
                        .WithMany("ImageRepairReceipts")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaintenanceCenter");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.Entities.MaintananceSchedule", b =>
                {
                    b.HasOne("Domain.Entities.VehicleModel", "VehicleModel")
                        .WithMany("MaintenanceSchedules")
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceCenter", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("MaintenanceCenter")
                        .HasForeignKey("Domain.Entities.MaintenanceCenter", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceHistoryStatus", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceInformation", "MaintenanceInformation")
                        .WithMany("MaintenanceHistoryStatuses")
                        .HasForeignKey("MaintenanceInformationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaintenanceInformation");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceInformation", b =>
                {
                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithOne("MaintenanceInformation")
                        .HasForeignKey("Domain.Entities.MaintenanceInformation", "BookingId");

                    b.HasOne("Domain.Entities.CustomerCare", "CustomerCare")
                        .WithMany("InformationMaintenances")
                        .HasForeignKey("CustomerCareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("CustomerCare");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceService", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceCenter", "MaintenanceCenter")
                        .WithMany("MaintenanceServices")
                        .HasForeignKey("MaintenanceCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ServiceCare", "ServiceCare")
                        .WithMany("MaintenanceServices")
                        .HasForeignKey("ServiceCareId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MaintenanceCenter");

                    b.Navigation("ServiceCare");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceServiceCost", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceService", "MaintenanceService")
                        .WithMany("MaintenanceServiceCosts")
                        .HasForeignKey("MaintenanceServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaintenanceService");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceServiceInfo", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceInformation", "InformationMaintenance")
                        .WithMany("MaintenanceServiceInfos")
                        .HasForeignKey("InformationMaintenanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MaintenanceService", "MaintenanceService")
                        .WithMany("MaintenanceServiceInfos")
                        .HasForeignKey("MaintenanceServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InformationMaintenance");

                    b.Navigation("MaintenanceService");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceSparePartInfo", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceInformation", "InformationMaintenance")
                        .WithMany("MaintenanceSparePartInfos")
                        .HasForeignKey("InformationMaintenanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SparePartsItem", "SparePartsItem")
                        .WithMany("MaintenanceSparePartInfos")
                        .HasForeignKey("SparePartsItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InformationMaintenance");

                    b.Navigation("SparePartsItem");
                });

            modelBuilder.Entity("Domain.Entities.Notification", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.OdoHistory", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceInformation", "MaintenanceInformation")
                        .WithOne("OdoHistory")
                        .HasForeignKey("Domain.Entities.OdoHistory", "MaintenanceInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Vehicles", "Vehicles")
                        .WithMany("OdoHistories")
                        .HasForeignKey("VehiclesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaintenanceInformation");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Domain.Entities.Receipt", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceInformation", "InformationMaintenance")
                        .WithOne("Receipt")
                        .HasForeignKey("Domain.Entities.Receipt", "InformationMaintenanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InformationMaintenance");
                });

            modelBuilder.Entity("Domain.Entities.ServiceCare", b =>
                {
                    b.HasOne("Domain.Entities.MaintananceSchedule", "MaintananceSchedule")
                        .WithMany("ServiceCares")
                        .HasForeignKey("MaintananceScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaintananceSchedule");
                });

            modelBuilder.Entity("Domain.Entities.SpareParts", b =>
                {
                    b.HasOne("Domain.Entities.MaintananceSchedule", "MaintananceSchedule")
                        .WithMany("Parts")
                        .HasForeignKey("MaintananceScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaintananceSchedule");
                });

            modelBuilder.Entity("Domain.Entities.SparePartsItem", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceCenter", "MaintenanceCenter")
                        .WithMany("SparePartsItems")
                        .HasForeignKey("MaintenanceCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SpareParts", "SpareParts")
                        .WithMany("SparePartsItems")
                        .HasForeignKey("SparePartsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MaintenanceCenter");

                    b.Navigation("SpareParts");
                });

            modelBuilder.Entity("Domain.Entities.SparePartsItemCost", b =>
                {
                    b.HasOne("Domain.Entities.SparePartsItem", "SparePartsItem")
                        .WithMany("SparePartsItemCost")
                        .HasForeignKey("SparePartsItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SparePartsItem");
                });

            modelBuilder.Entity("Domain.Entities.StaffCare", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("StaffCare")
                        .HasForeignKey("Domain.Entities.StaffCare", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MaintenanceCenter", "MaintenanceCenter")
                        .WithMany("StaffCares")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("MaintenanceCenter");
                });

            modelBuilder.Entity("Domain.Entities.Technician", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceInformation", "InformationMaintenance")
                        .WithMany("Technicians")
                        .HasForeignKey("InformationMaintenanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.StaffCare", "StaffCare")
                        .WithMany("Technicians")
                        .HasForeignKey("StaffCareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InformationMaintenance");

                    b.Navigation("StaffCare");
                });

            modelBuilder.Entity("Domain.Entities.VehicleModel", b =>
                {
                    b.HasOne("Domain.Entities.VehiclesBrand", "VehiclesBrand")
                        .WithMany("VehicleModels")
                        .HasForeignKey("VehiclesBrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VehiclesBrand");
                });

            modelBuilder.Entity("Domain.Entities.Vehicles", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("Vehicles")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.VehicleModel", "VehicleModel")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("Domain.Entities.VehiclesMaintenance", b =>
                {
                    b.HasOne("Domain.Entities.MaintenanceCenter", "MaintenanceCenter")
                        .WithMany("VehiclesMaintenance")
                        .HasForeignKey("MaintenanceCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.VehiclesBrand", "VehiclesBrand")
                        .WithMany("VehiclesMaintenance")
                        .HasForeignKey("VehiclesBrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaintenanceCenter");

                    b.Navigation("VehiclesBrand");
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("Client")
                        .IsRequired();

                    b.Navigation("CustomerCare")
                        .IsRequired();

                    b.Navigation("MaintenanceCenter")
                        .IsRequired();

                    b.Navigation("Notifications");

                    b.Navigation("StaffCare")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Navigation("MaintenanceInformation")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Domain.Entities.CustomerCare", b =>
                {
                    b.Navigation("InformationMaintenances");
                });

            modelBuilder.Entity("Domain.Entities.MaintananceSchedule", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Parts");

                    b.Navigation("ServiceCares");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceCenter", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CustomerCares");

                    b.Navigation("FeedBacks");

                    b.Navigation("ImageRepairReceipts");

                    b.Navigation("MaintenanceServices");

                    b.Navigation("SparePartsItems");

                    b.Navigation("StaffCares");

                    b.Navigation("VehiclesMaintenance");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceInformation", b =>
                {
                    b.Navigation("MaintenanceHistoryStatuses");

                    b.Navigation("MaintenanceServiceInfos");

                    b.Navigation("MaintenanceSparePartInfos");

                    b.Navigation("OdoHistory")
                        .IsRequired();

                    b.Navigation("Receipt")
                        .IsRequired();

                    b.Navigation("Technicians");
                });

            modelBuilder.Entity("Domain.Entities.MaintenanceService", b =>
                {
                    b.Navigation("MaintenanceServiceCosts");

                    b.Navigation("MaintenanceServiceInfos");
                });

            modelBuilder.Entity("Domain.Entities.Receipt", b =>
                {
                    b.Navigation("FeedBack")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.ServiceCare", b =>
                {
                    b.Navigation("MaintenanceServices");
                });

            modelBuilder.Entity("Domain.Entities.SpareParts", b =>
                {
                    b.Navigation("SparePartsItems");
                });

            modelBuilder.Entity("Domain.Entities.SparePartsItem", b =>
                {
                    b.Navigation("MaintenanceSparePartInfos");

                    b.Navigation("SparePartsItemCost");
                });

            modelBuilder.Entity("Domain.Entities.StaffCare", b =>
                {
                    b.Navigation("Technicians");
                });

            modelBuilder.Entity("Domain.Entities.VehicleModel", b =>
                {
                    b.Navigation("MaintenanceSchedules");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Domain.Entities.Vehicles", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ImageRepairReceipts");

                    b.Navigation("OdoHistories");
                });

            modelBuilder.Entity("Domain.Entities.VehiclesBrand", b =>
                {
                    b.Navigation("VehicleModels");

                    b.Navigation("VehiclesMaintenance");
                });
#pragma warning restore 612, 618
        }
    }
}
